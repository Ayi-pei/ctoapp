-- supabase.sql
-- This script sets up the entire database schema for the TradeFlow application.
-- It is designed to be idempotent, meaning it can be run multiple times without causing errors.

-- 1. EXTENSIONS
-- Enable the http extension for making HTTP requests (if needed for future webhooks)
CREATE EXTENSION IF NOT EXISTS http;
-- Enable the pg_cron extension for scheduling jobs (e.g., fetching market data)
CREATE EXTENSION IF NOT EXISTS pg_cron;
-- Enable pg_net for network access from within the database
CREATE EXTENSION IF NOT EXISTS pg_net;


-- 2. TABLE CREATION
-- User profiles, linked to Supabase auth users
CREATE TABLE IF NOT EXISTS public.profiles (
    id uuid PRIMARY KEY NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    username text UNIQUE NOT NULL,
    nickname text,
    email text UNIQUE NOT NULL,
    avatar_url text,
    inviter_id uuid REFERENCES public.profiles(id),
    is_admin boolean DEFAULT false NOT NULL,
    is_test_user boolean DEFAULT true NOT NULL,
    is_frozen boolean DEFAULT false NOT NULL,
    invitation_code text UNIQUE NOT NULL,
    credit_score integer DEFAULT 100 NOT NULL,
    last_login_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);
COMMENT ON TABLE public.profiles IS 'Stores public user profile information.';

-- User balances for different crypto/fiat assets
CREATE TABLE IF NOT EXISTS public.balances (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    asset text NOT NULL,
    available_balance numeric(30, 8) DEFAULT 0.00 NOT NULL,
    frozen_balance numeric(30, 8) DEFAULT 0.00 NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    UNIQUE(user_id, asset)
);
COMMENT ON TABLE public.balances IS 'Stores user asset balances.';

-- All user trades (spot and contract)
CREATE TABLE IF NOT EXISTS public.trades (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    trading_pair text NOT NULL,
    orderType text NOT NULL CHECK (orderType IN ('spot', 'contract')),
    type text NOT NULL CHECK (type IN ('buy', 'sell')),
    status text NOT NULL,
    amount numeric(30, 8),
    total numeric(30, 8),
    price numeric(30, 8),
    entry_price numeric(30, 8),
    settlement_price numeric(30, 8),
    profit_rate numeric(10, 4),
    profit numeric(30, 8),
    period integer,
    outcome text,
    settlement_time timestamp with time zone,
    base_asset text,
    quote_asset text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);
COMMENT ON TABLE public.trades IS 'Stores all spot and contract trades.';

-- User requests for deposit, withdrawal, etc.
CREATE TABLE IF NOT EXISTS public.requests (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    type text NOT NULL,
    asset text,
    amount numeric(30, 8),
    address text,
    transaction_hash text,
    new_password text,
    status text DEFAULT 'pending'::text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);
COMMENT ON TABLE public.requests IS 'User requests for deposits, withdrawals, etc.';

-- User investments in various products
CREATE TABLE IF NOT EXISTS public.investments (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    product_name text NOT NULL,
    amount numeric(30, 8) NOT NULL,
    profit numeric(30, 8),
    status text NOT NULL,
    productType text,
    category text,
    daily_rate numeric(10, 5),
    hourly_rate numeric(10, 5),
    period integer,
    duration_hours integer,
    stakingAsset text,
    stakingAmount numeric(30, 8),
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    settlement_date timestamp with time zone NOT NULL
);
COMMENT ON TABLE public.investments IS 'User investments in financial products.';

-- Logs for user rewards and commissions
CREATE TABLE IF NOT EXISTS public.reward_logs (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    type text NOT NULL,
    amount numeric(30, 8) NOT NULL,
    asset text NOT NULL,
    source_id text,
    source_username text,
    source_level integer,
    description text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);
COMMENT ON TABLE public.reward_logs IS 'Logs for user rewards and commissions.';

-- User daily task completion status
CREATE TABLE IF NOT EXISTS public.user_task_states (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    taskId text NOT NULL,
    date date NOT NULL,
    completed boolean DEFAULT false NOT NULL,
    UNIQUE(user_id, taskId, date)
);
COMMENT ON TABLE public.user_task_states IS 'Tracks daily task completion for users.';

-- P2P swap orders
CREATE TABLE IF NOT EXISTS public.swap_orders (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    "userId" uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    username text NOT NULL,
    "fromAsset" text NOT NULL,
    "fromAmount" numeric(30, 8) NOT NULL,
    "toAsset" text NOT NULL,
    "toAmount" numeric(30, 8) NOT NULL,
    status text NOT NULL,
    "takerId" uuid REFERENCES public.profiles(id),
    "takerUsername" text,
    "paymentProofUrl" text,
    "createdAt" timestamp with time zone DEFAULT now() NOT NULL
);
COMMENT ON TABLE public.swap_orders IS 'Peer-to-peer swap orders.';


-- 3. CONTENT & SETTINGS TABLES
-- These tables store content and configurations managed by admins.

CREATE TABLE IF NOT EXISTS public.daily_tasks (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    title text NOT NULL,
    description text,
    reward numeric(30, 8) NOT NULL,
    reward_type text NOT NULL,
    link text,
    status text NOT NULL,
    trigger text NOT NULL,
    imgSrc text
);
COMMENT ON TABLE public.daily_tasks IS 'Definitions for daily tasks available to users.';

CREATE TABLE IF NOT EXISTS public.activities (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    title text NOT NULL,
    description text,
    rewardRule text,
    howToClaim text,
    expiresAt timestamp with time zone NOT NULL,
    status text NOT NULL,
    imgSrc text,
    createdAt timestamp with time zone DEFAULT now() NOT NULL
);
COMMENT ON TABLE public.activities IS 'Limited-time activities and promotions.';

CREATE TABLE IF NOT EXISTS public.announcements (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    type text NOT NULL,
    content jsonb,
    title text,
    user_id uuid REFERENCES public.profiles(id),
    theme text,
    priority integer,
    expires_at timestamp with time zone,
    date timestamp with time zone DEFAULT now()
);
COMMENT ON TABLE public.announcements IS 'Stores various types of announcements (carousel, horn, personal).';

CREATE TABLE IF NOT EXISTS public.investment_products (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    name text NOT NULL,
    price numeric(30, 8) NOT NULL,
    dailyRate numeric(10, 5),
    period integer,
    maxPurchase integer NOT NULL,
    imgSrc text,
    category text NOT NULL,
    productType text,
    activeStartTime text,
    activeEndTime text,
    hourlyTiers jsonb,
    stakingAsset text,
    stakingAmount numeric(30, 8)
);
COMMENT ON TABLE public.investment_products IS 'Definitions for investment products.';

CREATE TABLE IF NOT EXISTS public.system_settings (
    id integer PRIMARY KEY,
    settings jsonb
);
COMMENT ON TABLE public.system_settings IS 'Singleton table for all system-wide settings.';

CREATE TABLE IF NOT EXISTS public.action_logs (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    entity_type text,
    entity_id text,
    action text,
    operator_id uuid,
    operator_username text,
    details text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);
COMMENT ON TABLE public.action_logs IS 'Logs for administrative actions.';


-- 4. MARKET DATA TABLES
-- Tables for storing real-time and historical market data.

CREATE TABLE IF NOT EXISTS public.market_kline_data (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    trading_pair text NOT NULL,
    time timestamp with time zone NOT NULL,
    open numeric(30, 8),
    high numeric(30, 8),
    low numeric(30, 8),
    close numeric(30, 8),
    volume numeric(30, 8),
    UNIQUE(trading_pair, time)
);
COMMENT ON TABLE public.market_kline_data IS 'Stores OHLCV k-line data for market charts.';

CREATE TABLE IF NOT EXISTS public.market_summary_data (
    pair text PRIMARY KEY,
    price numeric(30, 8) DEFAULT 0 NOT NULL,
    change numeric(10, 4) DEFAULT 0 NOT NULL,
    volume numeric(30, 8) DEFAULT 0 NOT NULL,
    high numeric(30, 8) DEFAULT 0 NOT NULL,
    low numeric(30, 8) DEFAULT 0 NOT NULL,
    icon text,
    updated_at timestamp with time zone DEFAULT now()
);
COMMENT ON TABLE public.market_summary_data IS 'Stores real-time summary data for market pairs.';


-- 5. TRIGGERS AND AUTOMATION
-- Function to automatically create a profile when a new user signs up in Supabase Auth.
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO public.profiles (id, username, nickname, email, invitation_code, inviter_id, is_test_user, credit_score, avatar_url)
    VALUES (
        new.id,
        new.raw_user_meta_data->>'username',
        new.raw_user_meta_data->>'nickname',
        new.email,
        new.raw_user_meta_data->>'invitation_code',
        (new.raw_user_meta_data->>'inviter_id')::uuid,
        (new.raw_user_meta_data->>'is_test_user')::boolean,
        (new.raw_user_meta_data->>'credit_score')::integer,
        new.raw_user_meta_data->>'avatar_url'
    );
    RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Drop the trigger if it already exists to avoid errors on re-run.
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
-- Create the trigger to call the function after a new user is created.
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();


-- Function to update the `updated_at` timestamp on tables
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Drop and create triggers for `updated_at`
DROP TRIGGER IF EXISTS handle_balances_update ON public.balances;
CREATE TRIGGER handle_balances_update
    BEFORE UPDATE ON public.balances
    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

DROP TRIGGER IF EXISTS handle_requests_update ON public.requests;
CREATE TRIGGER handle_requests_update
    BEFORE UPDATE ON public.requests
    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

DROP TRIGGER IF EXISTS handle_summary_update ON public.market_summary_data;
CREATE TRIGGER handle_summary_update
    BEFORE UPDATE ON public.market_summary_data
    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


-- 6. INDEXES
-- Create indexes for frequently queried columns to improve performance.
CREATE INDEX IF NOT EXISTS idx_balances_user_id ON public.balances(user_id);
CREATE INDEX IF NOT EXISTS idx_trades_user_id ON public.trades(user_id);
CREATE INDEX IF NOT EXISTS idx_requests_user_id ON public.requests(user_id);
CREATE INDEX IF NOT EXISTS idx_requests_status ON public.requests(status);
CREATE INDEX IF NOT EXISTS idx_investments_user_id ON public.investments(user_id);
CREATE INDEX IF NOT EXISTS idx_reward_logs_user_id ON public.reward_logs(user_id);
CREATE INDEX IF NOT EXISTS idx_user_task_states_user_id_date ON public.user_task_states(user_id, date);
CREATE INDEX IF NOT EXISTS idx_swap_orders_userId ON public.swap_orders("userId");
CREATE INDEX IF NOT EXISTS idx_swap_orders_status ON public.swap_orders(status);
CREATE INDEX IF NOT EXISTS idx_profiles_invitation_code ON public.profiles(invitation_code);
CREATE INDEX IF NOT EXISTS idx_market_kline_data_pair_time ON public.market_kline_data(trading_pair, time DESC);


-- 7. SEEDING INITIAL DATA (Optional)
-- Insert default system settings if they don't exist
INSERT INTO public.system_settings (id, settings)
VALUES (1, '{}'::jsonb)
ON CONFLICT (id) DO NOTHING;


-- 8. DATABASE FUNCTIONS

-- Drop the function first to ensure changes to the return type are applied.
DROP FUNCTION IF EXISTS public.get_downline(uuid);

-- Function to get all downline members recursively
CREATE OR REPLACE FUNCTION get_downline(p_user_id uuid)
RETURNS TABLE(id uuid, username text, nickname text, email text, inviter_id uuid, is_admin boolean, is_test_user boolean, is_frozen boolean, invitation_code text, created_at timestamp with time zone, credit_score integer, avatar_url text, level integer) AS $$
BEGIN
    RETURN QUERY
    WITH RECURSIVE downline_cte AS (
        SELECT p.id, p.username, p.nickname, p.email, p.inviter_id, p.is_admin, p.is_test_user, p.is_frozen, p.invitation_code, p.created_at, p.credit_score, p.avatar_url, 1 AS level
        FROM public.profiles p
        WHERE p.inviter_id = p_user_id

        UNION ALL

        SELECT p.id, p.username, p.nickname, p.email, p.inviter_id, p.is_admin, p.is_test_user, p.is_frozen, p.invitation_code, p.created_at, p.credit_score, p.avatar_url, d.level + 1
        FROM public.profiles p
        JOIN downline_cte d ON p.inviter_id = d.id
    )
    SELECT * FROM downline_cte;
END;
$$ LANGUAGE plpgsql;


-- Function to get total platform balance
CREATE OR REPLACE FUNCTION get_total_platform_balance()
RETURNS numeric AS $$
DECLARE
    total_balance numeric;
BEGIN
    SELECT COALESCE(SUM(available_balance), 0)
    INTO total_balance
    FROM public.balances
    WHERE asset = 'USDT'; -- Or sum across all assets converted to a common currency

    RETURN total_balance;
END;
$$ LANGUAGE plpgsql;


-- Function to adjust a user's balance
CREATE OR REPLACE FUNCTION adjust_balance(p_user_id uuid, p_asset text, p_amount numeric, p_is_frozen boolean DEFAULT false)
RETURNS void AS $$
BEGIN
    IF p_is_frozen THEN
        INSERT INTO public.balances (user_id, asset, frozen_balance)
        VALUES (p_user_id, p_asset, p_amount)
        ON CONFLICT (user_id, asset)
        DO UPDATE SET frozen_balance = public.balances.frozen_balance + p_amount;
    ELSE
        INSERT INTO public.balances (user_id, asset, available_balance)
        VALUES (p_user_id, p_asset, p_amount)
        ON CONFLICT (user_id, asset)
        DO UPDATE SET available_balance = public.balances.available_balance + p_amount;
    END IF;
END;
$$ LANGUAGE plpgsql;


-- 9. ROW-LEVEL SECURITY (RLS)
-- Enable RLS for all tables that store user-specific data.

ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.balances ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.trades ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.requests ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.investments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.reward_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_task_states ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.swap_orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.action_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.daily_tasks ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.activities ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.announcements ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.investment_products ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.system_settings ENABLE ROW LEVEL SECURITY;


-- Drop existing policies before creating new ones to avoid conflicts.
DROP POLICY IF EXISTS "Users can view their own profile." ON public.profiles;
DROP POLICY IF EXISTS "Users can update their own profile." ON public.profiles;
DROP POLICY IF EXISTS "Admins can manage all profiles." ON public.profiles;

DROP POLICY IF EXISTS "Users can view their own balances." ON public.balances;
DROP POLICY IF EXISTS "Admins can manage all balances." ON public.balances;

DROP POLICY IF EXISTS "Users can view their own trades." ON public.trades;
DROP POLICY IF EXISTS "Admins can view all trades." ON public.trades;

DROP POLICY IF EXISTS "Users can manage their own requests." ON public.requests;
DROP POLICY IF EXISTS "Admins can manage all requests." ON public.requests;

DROP POLICY IF EXISTS "Users can view their own investments." ON public.investments;
DROP POLICY IF EXISTS "Admins can view all investments." ON public.investments;

DROP POLICY IF EXISTS "Users can view their own reward logs." ON public.reward_logs;
DROP POLICY IF EXISTS "Admins can view all reward logs." ON public.reward_logs;

DROP POLICY IF EXISTS "Users can manage their own task states." ON public.user_task_states;
DROP POLICY IF EXISTS "Admins can manage all task states." ON public.user_task_states;

DROP POLICY IF EXISTS "Users can manage their own swap orders." ON public.swap_orders;
DROP POLICY IF EXISTS "Users can view open swap orders." ON public.swap_orders;
DROP POLICY IF EXISTS "Admins can manage all swap orders." ON public.swap_orders;

DROP POLICY IF EXISTS "Public can read daily tasks" ON public.daily_tasks;
DROP POLICY IF EXISTS "Public can read activities" ON public.activities;
DROP POLICY IF EXISTS "Public can read announcements" ON public.announcements;
DROP POLICY IF EXISTS "Public can read investment products" ON public.investment_products;
DROP POLICY IF EXISTS "Admins can manage content tables" ON public.daily_tasks;
DROP POLICY IF EXISTS "Admins can manage activities" ON public.activities;
DROP POLICY IF EXISTS "Admins can manage announcements" ON public.announcements;
DROP POLICY IF EXISTS "Admins can manage investment_products" ON public.investment_products;
DROP POLICY IF EXISTS "Admins can manage system settings" ON public.system_settings;
DROP POLICY IF EXISTS "Admins can manage logs" ON public.action_logs;


-- RLS Policies for PROFILES
CREATE POLICY "Users can view their own profile." ON public.profiles FOR SELECT USING (auth.uid() = id);
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id) WITH CHECK (auth.uid() = id);
CREATE POLICY "Admins can manage all profiles." ON public.profiles FOR ALL USING ((SELECT is_admin FROM public.profiles WHERE id = auth.uid()));

-- RLS Policies for BALANCES
CREATE POLICY "Users can view their own balances." ON public.balances FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Admins can manage all balances." ON public.balances FOR ALL USING ((SELECT is_admin FROM public.profiles WHERE id = auth.uid()));

-- RLS Policies for TRADES
CREATE POLICY "Users can view their own trades." ON public.trades FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Admins can view all trades." ON public.trades FOR ALL USING ((SELECT is_admin FROM public.profiles WHERE id = auth.uid()));

-- RLS Policies for REQUESTS
CREATE POLICY "Users can manage their own requests." ON public.requests FOR ALL USING (auth.uid() = user_id);
CREATE POLICY "Admins can manage all requests." ON public.requests FOR ALL USING ((SELECT is_admin FROM public.profiles WHERE id = auth.uid()));

-- RLS Policies for INVESTMENTS
CREATE POLICY "Users can view their own investments." ON public.investments FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Admins can view all investments." ON public.investments FOR ALL USING ((SELECT is_admin FROM public.profiles WHERE id = auth.uid()));

-- RLS Policies for REWARD_LOGS
CREATE POLICY "Users can view their own reward logs." ON public.reward_logs FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Admins can view all reward logs." ON public.reward_logs FOR ALL USING ((SELECT is_admin FROM public.profiles WHERE id = auth.uid()));

-- RLS Policies for USER_TASK_STATES
CREATE POLICY "Users can manage their own task states." ON public.user_task_states FOR ALL USING (auth.uid() = user_id);
CREATE POLICY "Admins can manage all task states." ON public.user_task_states FOR ALL USING ((SELECT is_admin FROM public.profiles WHERE id = auth.uid()));

-- RLS Policies for SWAP_ORDERS
CREATE POLICY "Users can manage their own swap orders." ON public.swap_orders FOR ALL USING (auth.uid() = "userId" OR auth.uid() = "takerId");
CREATE POLICY "Users can view open swap orders." ON public.swap_orders FOR SELECT USING (status = 'open');
CREATE POLICY "Admins can manage all swap orders." ON public.swap_orders FOR ALL USING ((SELECT is_admin FROM public.profiles WHERE id = auth.uid()));

-- RLS Policies for Content & Settings Tables
CREATE POLICY "Public can read daily tasks" ON public.daily_tasks FOR SELECT USING (true);
CREATE POLICY "Public can read activities" ON public.activities FOR SELECT USING (true);
CREATE POLICY "Public can read announcements" ON public.announcements FOR SELECT USING (true);
CREATE POLICY "Public can read investment products" ON public.investment_products FOR SELECT USING (true);
CREATE POLICY "Admins can manage content tables" ON public.daily_tasks FOR ALL USING ((SELECT is_admin FROM public.profiles WHERE id = auth.uid()));
CREATE POLICY "Admins can manage activities" ON public.activities FOR ALL USING ((SELECT is_admin FROM public.profiles WHERE id = auth.uid()));
CREATE POLICY "Admins can manage announcements" ON public.announcements FOR ALL USING ((SELECT is_admin FROM public.profiles WHERE id = auth.uid()));
CREATE POLICY "Admins can manage investment_products" ON public.investment_products FOR ALL USING ((SELECT is_admin FROM public.profiles WHERE id = auth.uid()));
CREATE POLICY "Admins can manage system settings" ON public.system_settings FOR ALL USING ((SELECT is_admin FROM public.profiles WHERE id = auth.uid()));
CREATE POLICY "Admins can manage logs" ON public.action_logs FOR ALL USING ((SELECT is_admin FROM public.profiles WHERE id = auth.uid()));


-- 10. PUBLICATION FOR REALTIME
-- Drop existing publications if they exist
DROP PUBLICATION IF EXISTS supabase_realtime;

-- Create a new publication for all tables to enable realtime functionality
-- Note: Supabase automatically handles this for tables with RLS, but being explicit can be helpful.
-- We will only add tables that need realtime updates on the client.
CREATE PUBLICATION supabase_realtime FOR TABLE public.market_summary_data, public.market_kline_data, public.swap_orders;
