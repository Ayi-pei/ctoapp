
-- Supabase Stater SQL
-- Version: 1.0
-- Description: A complete SQL script to set up the required tables, policies, and indexes for the application.
-- This script is idempotent and can be run multiple times without causing errors.

-- ==== Table: market_summary_data ====
-- Stores the latest summary data for each trading pair.
CREATE TABLE IF NOT EXISTS public.market_summary_data (
    pair TEXT PRIMARY KEY,
    price REAL NOT NULL,
    change REAL NOT NULL,
    volume REAL NOT NULL,
    high REAL NOT NULL,
    low REAL NOT NULL,
    icon TEXT,
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE public.market_summary_data IS 'Stores real-time market summary data for various trading pairs.';

-- ==== Table: market_kline_data ====
-- Stores historical OHLC (k-line) data for charting.
CREATE TABLE IF NOT EXISTS public.market_kline_data (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    trading_pair TEXT NOT NULL,
    time BIGINT NOT NULL,
    open REAL NOT NULL,
    high REAL NOT NULL,
    low REAL NOT NULL,
    close REAL NOT NULL
);
COMMENT ON TABLE public.market_kline_data IS 'Stores OHLC (candlestick) data for market charts.';

-- Indexes for faster queries on k-line data
CREATE INDEX IF NOT EXISTS idx_market_kline_data_time ON public.market_kline_data(time DESC);
CREATE INDEX IF NOT EXISTS idx_market_kline_data_pair_time ON public.market_kline_data(trading_pair, time DESC);

-- ==== Table: reward_logs ====
-- Logs all rewards and commissions distributed to users.
CREATE TABLE IF NOT EXISTS public.reward_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id TEXT NOT NULL,
    type TEXT NOT NULL, -- 'dailyTask', 'team', 'event', or 'system'
    amount REAL NOT NULL,
    source_id TEXT,
    description TEXT,
    created_at BIGINT DEFAULT EXTRACT(EPOCH FROM NOW())::BIGINT
);
COMMENT ON TABLE public.reward_logs IS 'Records all rewards and commissions given to users.';

-- Indexes for reward logs
CREATE INDEX IF NOT EXISTS idx_reward_logs_user ON public.reward_logs(user_id);
CREATE INDEX IF NOT EXISTS idx_reward_logs_type ON public.reward_logs(type);

-- ==== Table: options_contracts ====
-- Stores data for options contracts.
CREATE TABLE IF NOT EXISTS public.options_contracts (
    contract_id TEXT PRIMARY KEY,
    underlying_symbol TEXT NOT NULL,
    expiration_date DATE NOT NULL,
    type TEXT NOT NULL, -- 'call' or 'put'
    strike_price REAL NOT NULL,
    last_price REAL,
    bid REAL,
    ask REAL,
    change REAL,
    change_percent REAL,
    volume INTEGER,
    open_interest INTEGER,
    implied_volatility REAL,
    in_the_money BOOLEAN,
    delta REAL,
    gamma REAL,
    theta REAL,
    vega REAL,
    rho REAL,
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE public.options_contracts IS 'Stores market data for options contracts.';

-- Index for options contracts
CREATE INDEX IF NOT EXISTS idx_options_contracts_symbol_expiry ON public.options_contracts(underlying_symbol, expiration_date);

-- ==== Table: market_interventions ====
-- Stores rules for market data intervention set by admins.
CREATE TABLE IF NOT EXISTS public.market_interventions (
  id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  trading_pair TEXT NOT NULL,
  start_time TIMESTAMPTZ NOT NULL,
  end_time TIMESTAMPTZ NOT NULL,
  rule JSONB NOT NULL,  -- e.g. { "priceMultiplier": 1.05, "volumeOffset": 200, "forceValue": 66666 }
  created_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE public.market_interventions IS 'Defines rules for admin-controlled market data intervention.';


-- ==== Row Level Security (RLS) Policies ====
-- Enable RLS and define read-access policies for public tables.

-- RLS for market_kline_data
ALTER TABLE public.market_kline_data ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow public read access to kline data" ON public.market_kline_data;
CREATE POLICY "Allow public read access to kline data"
ON public.market_kline_data
FOR SELECT
USING (true);

-- RLS for market_summary_data
ALTER TABLE public.market_summary_data ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow public read access to summary data" ON public.market_summary_data;
CREATE POLICY "Allow public read access to summary data"
ON public.market_summary_data
FOR SELECT
USING (true);

-- RLS for options_contracts
ALTER TABLE public.options_contracts ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow public read access to options data" ON public.options_contracts;
CREATE POLICY "Allow public read access to options data"
ON public.options_contracts
FOR SELECT
USING (true);

-- Note: No RLS is applied to `reward_logs` or `market_interventions` by default,
-- as they are assumed to be accessed only by authenticated server-side logic (e.g., Supabase Edge Functions or a secure backend).
-- If client-side access is ever needed, appropriate authenticated RLS policies must be created.

-- ==== End of Script ====
-- Your Supabase database is now set up.
