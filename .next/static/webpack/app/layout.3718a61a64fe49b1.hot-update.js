"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"d87fe8bcfa90\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyJEOlxceGlhbmdtdVxcRWRnZS1GdW5jdGlvblxcY3RvYXBwXFxzcmNcXGFwcFxcZ2xvYmFscy5jc3MiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCJkODdmZThiY2ZhOTBcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/context/balance-context.tsx":
/*!*****************************************!*\
  !*** ./src/context/balance-context.tsx ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BalanceProvider: () => (/* binding */ BalanceProvider),\n/* harmony export */   useBalance: () => (/* binding */ useBalance)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _auth_context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./auth-context */ \"(app-pages-browser)/./src/context/auth-context.tsx\");\n/* harmony import */ var _enhanced_market_data_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./enhanced-market-data-context */ \"(app-pages-browser)/./src/context/enhanced-market-data-context.tsx\");\n/* harmony import */ var _hooks_use_toast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/hooks/use-toast */ \"(app-pages-browser)/./src/hooks/use-toast.ts\");\n/* harmony import */ var _simple_enhanced_logs_context__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./simple-enhanced-logs-context */ \"(app-pages-browser)/./src/context/simple-enhanced-logs-context.tsx\");\n/* harmony import */ var _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/lib/supabaseClient */ \"(app-pages-browser)/./src/lib/supabaseClient.ts\");\n/* __next_internal_client_entry_do_not_use__ BalanceProvider,useBalance auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\n\n\nconst BalanceContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nfunction BalanceProvider(param) {\n    let { children } = param;\n    _s();\n    const { user, updateUser } = (0,_auth_context__WEBPACK_IMPORTED_MODULE_2__.useAuth)();\n    const { getLatestPrice } = (0,_enhanced_market_data_context__WEBPACK_IMPORTED_MODULE_3__.useEnhancedMarket)();\n    const { toast } = (0,_hooks_use_toast__WEBPACK_IMPORTED_MODULE_4__.useToast)();\n    const { addLog } = (0,_simple_enhanced_logs_context__WEBPACK_IMPORTED_MODULE_5__.useSimpleEnhancedLogs)();\n    const [balances, setBalances] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [investments, setInvestments] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [rewardLogs, setRewardLogs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [activeContractTrades, setActiveContractTrades] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [historicalTrades, setHistoricalTrades] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [lastCheckInDate, setLastCheckInDate] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const [consecutiveCheckIns, setConsecutiveCheckIns] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const fetchUserBalanceData = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"BalanceProvider.useCallback[fetchUserBalanceData]\": async (userId)=>{\n            if (!_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) return;\n            const { data, error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.from(\"balances\").select(\"*\").eq(\"user_id\", userId);\n            if (error) console.error(\"Error fetching balances:\", error);\n            else {\n                const formattedBalances = {};\n                data === null || data === void 0 ? void 0 : data.forEach({\n                    \"BalanceProvider.useCallback[fetchUserBalanceData]\": (b)=>{\n                        formattedBalances[b.asset] = {\n                            available: b.available_balance,\n                            frozen: b.frozen_balance\n                        };\n                    }\n                }[\"BalanceProvider.useCallback[fetchUserBalanceData]\"]);\n                setBalances(formattedBalances);\n            }\n        }\n    }[\"BalanceProvider.useCallback[fetchUserBalanceData]\"], []);\n    const fetchUserTradeData = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"BalanceProvider.useCallback[fetchUserTradeData]\": async (userId)=>{\n            if (!_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) return;\n            const { data, error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.from(\"trades\").select(\"*\").eq(\"user_id\", userId).order(\"created_at\", {\n                ascending: false\n            });\n            if (error) console.error(\"Error fetching trades:\", error);\n            else {\n                setActiveContractTrades(data.filter({\n                    \"BalanceProvider.useCallback[fetchUserTradeData]\": (t)=>t.orderType === \"contract\" && t.status === \"active\"\n                }[\"BalanceProvider.useCallback[fetchUserTradeData]\"]));\n                setHistoricalTrades(data.filter({\n                    \"BalanceProvider.useCallback[fetchUserTradeData]\": (t)=>t.status !== \"active\"\n                }[\"BalanceProvider.useCallback[fetchUserTradeData]\"]));\n            }\n        }\n    }[\"BalanceProvider.useCallback[fetchUserTradeData]\"], []);\n    const fetchUserInvestmentData = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"BalanceProvider.useCallback[fetchUserInvestmentData]\": async (userId)=>{\n            if (!_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) return;\n            const { data, error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.from(\"investments\").select(\"*\").eq(\"user_id\", userId).order(\"created_at\", {\n                ascending: false\n            });\n            if (error) console.error(\"Error fetching investments:\", error);\n            else setInvestments(data);\n        }\n    }[\"BalanceProvider.useCallback[fetchUserInvestmentData]\"], []);\n    const fetchUserRewardLogs = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"BalanceProvider.useCallback[fetchUserRewardLogs]\": async (userId)=>{\n            if (!_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) return;\n            const { data, error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.from(\"reward_logs\").select(\"*\").eq(\"user_id\", userId).order(\"created_at\", {\n                ascending: false\n            });\n            if (error) console.error(\"Error fetching reward logs:\", error);\n            else setRewardLogs(data);\n        }\n    }[\"BalanceProvider.useCallback[fetchUserRewardLogs]\"], []);\n    const fetchUserProfileForCheckin = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"BalanceProvider.useCallback[fetchUserProfileForCheckin]\": async (userId)=>{\n            if (!_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) return;\n            const { data, error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.from(\"profiles\").select(\"last_check_in_date, consecutive_check_ins\").eq(\"id\", userId).single();\n            if (error) {\n                console.error(\"Error fetching user profile for check-in:\", error);\n            } else if (data) {\n                setLastCheckInDate(data.last_check_in_date);\n                setConsecutiveCheckIns(data.consecutive_check_ins || 0);\n            }\n        }\n    }[\"BalanceProvider.useCallback[fetchUserProfileForCheckin]\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"BalanceProvider.useEffect\": ()=>{\n            const loadAllData = {\n                \"BalanceProvider.useEffect.loadAllData\": async ()=>{\n                    setIsLoading(true);\n                    if ((user === null || user === void 0 ? void 0 : user.id) && _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) {\n                        await Promise.all([\n                            fetchUserBalanceData(user.id),\n                            fetchUserTradeData(user.id),\n                            fetchUserInvestmentData(user.id),\n                            fetchUserRewardLogs(user.id),\n                            fetchUserProfileForCheckin(user.id)\n                        ]);\n                    } else {\n                        // Clear data on logout\n                        setBalances({});\n                        setInvestments([]);\n                        setRewardLogs([]);\n                        setActiveContractTrades([]);\n                        setHistoricalTrades([]);\n                        setLastCheckInDate(undefined);\n                        setConsecutiveCheckIns(0);\n                    }\n                    setIsLoading(false);\n                }\n            }[\"BalanceProvider.useEffect.loadAllData\"];\n            loadAllData();\n        }\n    }[\"BalanceProvider.useEffect\"], [\n        user,\n        _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled,\n        fetchUserBalanceData,\n        fetchUserTradeData,\n        fetchUserInvestmentData,\n        fetchUserRewardLogs,\n        fetchUserProfileForCheckin\n    ]);\n    // Realtime Subscriptions\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"BalanceProvider.useEffect\": ()=>{\n            if (!user || !_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) return;\n            const handleDataChange = {\n                \"BalanceProvider.useEffect.handleDataChange\": ()=>{\n                    if (!user) return;\n                    fetchUserTradeData(user.id);\n                    fetchUserInvestmentData(user.id);\n                    fetchUserBalanceData(user.id);\n                    fetchUserProfileForCheckin(user.id);\n                }\n            }[\"BalanceProvider.useEffect.handleDataChange\"];\n            const tradesChannel = _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.channel(\"trades-channel-\".concat(user.id)).on(\"postgres_changes\", {\n                event: \"*\",\n                schema: \"public\",\n                table: \"trades\",\n                filter: \"user_id=eq.\".concat(user.id)\n            }, handleDataChange).subscribe();\n            const investmentsChannel = _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.channel(\"investments-channel-\".concat(user.id)).on(\"postgres_changes\", {\n                event: \"*\",\n                schema: \"public\",\n                table: \"investments\",\n                filter: \"user_id=eq.\".concat(user.id)\n            }, handleDataChange).subscribe();\n            const balancesChannel = _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.channel(\"balances-channel-\".concat(user.id)).on(\"postgres_changes\", {\n                event: \"*\",\n                schema: \"public\",\n                table: \"balances\",\n                filter: \"user_id=eq.\".concat(user.id)\n            }, handleDataChange).subscribe();\n            const profileChannel = _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.channel(\"profile-channel-\".concat(user.id)).on(\"postgres_changes\", {\n                event: \"UPDATE\",\n                schema: \"public\",\n                table: \"profiles\",\n                filter: \"id=eq.\".concat(user.id)\n            }, handleDataChange).subscribe();\n            return ({\n                \"BalanceProvider.useEffect\": ()=>{\n                    _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.removeChannel(tradesChannel);\n                    _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.removeChannel(investmentsChannel);\n                    _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.removeChannel(balancesChannel);\n                    _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.removeChannel(profileChannel);\n                }\n            })[\"BalanceProvider.useEffect\"];\n        }\n    }[\"BalanceProvider.useEffect\"], [\n        user,\n        _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled,\n        fetchUserTradeData,\n        fetchUserInvestmentData,\n        fetchUserBalanceData,\n        fetchUserProfileForCheckin\n    ]);\n    const adjustBalance = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"BalanceProvider.useCallback[adjustBalance]\": async function(userId, asset, amount) {\n            let isFrozen = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false, isDebitFrozen = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;\n            if (!_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) return;\n            const { error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.rpc(\"adjust_balance\", {\n                p_user_id: userId,\n                p_asset: asset,\n                p_amount: amount,\n                p_is_frozen: isFrozen,\n                p_is_debit_frozen: isDebitFrozen\n            });\n            if (error) {\n                console.error(\"Error adjusting balance:\", error);\n                if ((user === null || user === void 0 ? void 0 : user.id) === userId) {\n                    toast({\n                        variant: \"destructive\",\n                        title: \"Balance Update Failed\",\n                        description: error.message\n                    });\n                }\n            } else {\n                if ((user === null || user === void 0 ? void 0 : user.id) === userId) {\n                    fetchUserBalanceData(userId);\n                }\n            }\n        }\n    }[\"BalanceProvider.useCallback[adjustBalance]\"], [\n        toast,\n        user === null || user === void 0 ? void 0 : user.id,\n        fetchUserBalanceData\n    ]);\n    const creditReward = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"BalanceProvider.useCallback[creditReward]\": async (params)=>{\n            if (!_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) return;\n            const { error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.rpc(\"credit_reward\", {\n                p_user_id: params.userId,\n                p_amount: params.amount,\n                p_asset: params.asset,\n                p_reward_type: params.type,\n                p_source_id: params.sourceId,\n                p_description: params.description\n            });\n            if (error) {\n                console.error(\"Error crediting reward:\", error);\n            }\n        }\n    }[\"BalanceProvider.useCallback[creditReward]\"], []);\n    const placeContractTrade = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"BalanceProvider.useCallback[placeContractTrade]\": async (trade, tradingPair)=>{\n            var _balances_quoteAsset;\n            if (!user || !_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) return;\n            if (user.is_frozen) {\n                toast({\n                    variant: \"destructive\",\n                    title: \"Action Failed\",\n                    description: \"Your account is frozen.\"\n                });\n                return;\n            }\n            const quoteAsset = tradingPair.split(\"/\")[1];\n            const currentPrice = getLatestPrice(tradingPair);\n            if ((((_balances_quoteAsset = balances[quoteAsset]) === null || _balances_quoteAsset === void 0 ? void 0 : _balances_quoteAsset.available) || 0) < trade.amount) {\n                toast({\n                    variant: \"destructive\",\n                    title: \"下单失败\",\n                    description: \"可用 \".concat(quoteAsset, \" 余额不足。\")\n                });\n                return;\n            }\n            const newTrade = {\n                user_id: user.id,\n                trading_pair: tradingPair,\n                type: trade.type,\n                amount: trade.amount,\n                entry_price: currentPrice,\n                settlement_time: new Date(Date.now() + trade.period * 1000).toISOString(),\n                period: trade.period,\n                profit_rate: trade.profit_rate,\n                status: \"active\",\n                orderType: \"contract\"\n            };\n            const { data: insertedTrade, error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.from(\"trades\").insert(newTrade).select().single();\n            if (error || !insertedTrade) {\n                console.error(\"Failed to place contract trade:\", error);\n                toast({\n                    variant: \"destructive\",\n                    title: \"下单失败\",\n                    description: \"无法保存交易记录，请重试。\"\n                });\n                return;\n            }\n            toast({\n                title: \"下单成功\",\n                description: \"您的合约订单已成功建立。\"\n            });\n        }\n    }[\"BalanceProvider.useCallback[placeContractTrade]\"], [\n        user,\n        balances,\n        getLatestPrice,\n        toast\n    ]);\n    const placeSpotTrade = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"BalanceProvider.useCallback[placeSpotTrade]\": async (trade)=>{\n            var _balances_quoteAsset, _balances_baseAsset;\n            if (!user || !_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) return;\n            if (user.is_frozen) {\n                toast({\n                    variant: \"destructive\",\n                    title: \"Action Failed\",\n                    description: \"Your account is frozen.\"\n                });\n                return;\n            }\n            const [baseAsset, quoteAsset] = trade.trading_pair.split(\"/\");\n            if (trade.type === \"buy\" && (((_balances_quoteAsset = balances[quoteAsset]) === null || _balances_quoteAsset === void 0 ? void 0 : _balances_quoteAsset.available) || 0) < trade.total) {\n                toast({\n                    variant: \"destructive\",\n                    title: \"下单失败\",\n                    description: \"可用 \".concat(quoteAsset, \" 余额不足。\")\n                });\n                return;\n            }\n            if (trade.type === \"sell\" && (((_balances_baseAsset = balances[baseAsset]) === null || _balances_baseAsset === void 0 ? void 0 : _balances_baseAsset.available) || 0) < trade.amount) {\n                toast({\n                    variant: \"destructive\",\n                    title: \"下单失败\",\n                    description: \"可用 \".concat(baseAsset, \" 余额不足。\")\n                });\n                return;\n            }\n            const currentPrice = getLatestPrice(trade.trading_pair);\n            const newTrade = {\n                type: trade.type,\n                amount: trade.amount,\n                total: trade.total,\n                price: currentPrice,\n                user_id: user.id,\n                trading_pair: trade.trading_pair,\n                base_asset: baseAsset,\n                quote_asset: quoteAsset,\n                status: \"filled\",\n                orderType: \"spot\"\n            };\n            const { data: insertedTrade, error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.from(\"trades\").insert(newTrade).select().single();\n            if (error || !insertedTrade) {\n                console.error(\"Failed to place spot trade:\", error);\n                toast({\n                    variant: \"destructive\",\n                    title: \"下单失败\",\n                    description: \"无法保存交易记录，请联系客服。\"\n                });\n                return;\n            }\n            toast({\n                title: \"交易成功\",\n                description: \"您的币币交易已完成。\"\n            });\n        }\n    }[\"BalanceProvider.useCallback[placeSpotTrade]\"], [\n        user,\n        balances,\n        getLatestPrice,\n        toast\n    ]);\n    const addDailyInvestment = async (params)=>{\n        if (!user || !_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) return false;\n        const { error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.rpc(\"create_daily_investment\", {\n            p_user_id: user.id,\n            p_product_name: params.productName,\n            p_amount: params.amount,\n            p_daily_rate: params.dailyRate,\n            p_period: params.period,\n            p_category: \"staking\",\n            p_staking_asset: params.stakingAsset,\n            p_staking_amount: params.stakingAmount\n        });\n        if (error) {\n            console.error(\"Failed to add daily investment:\", error);\n            toast({\n                variant: \"destructive\",\n                title: \"购买失败\",\n                description: error.message\n            });\n            return false;\n        }\n        return true;\n    };\n    const addHourlyInvestment = async (params)=>{\n        if (!user || !_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) return false;\n        const selectedTier = params.tiers.find((t)=>t.hours === params.durationHours);\n        if (!selectedTier) return false;\n        const { error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.rpc(\"create_hourly_investment\", {\n            p_user_id: user.id,\n            p_product_name: params.productName,\n            p_amount: params.amount,\n            p_duration_hours: params.durationHours,\n            p_hourly_rate: selectedTier.rate\n        });\n        if (error) {\n            console.error(\"Failed to add hourly investment:\", error);\n            toast({\n                variant: \"destructive\",\n                title: \"购买失败\",\n                description: error.message\n            });\n            return false;\n        }\n        return true;\n    };\n    const handleCheckIn = async ()=>{\n        if (!user || !_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) {\n            return {\n                success: false,\n                reward: 0,\n                message: \"User not logged in.\"\n            };\n        }\n        const { data, error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.rpc(\"handle_user_check_in\", {\n            p_user_id: user.id\n        });\n        if (error) {\n            return {\n                success: false,\n                reward: 0,\n                message: error.message\n            };\n        }\n        return {\n            success: data.success,\n            reward: data.reward_amount,\n            message: data.message\n        };\n    };\n    const value = {\n        balances,\n        placeContractTrade,\n        placeSpotTrade,\n        isLoading,\n        investments,\n        rewardLogs,\n        addDailyInvestment,\n        addHourlyInvestment,\n        activeContractTrades,\n        historicalTrades,\n        handleCheckIn,\n        lastCheckInDate,\n        consecutiveCheckIns,\n        creditReward,\n        adjustBalance\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(BalanceContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"D:\\\\xiangmu\\\\Edge-Function\\\\ctoapp\\\\src\\\\context\\\\balance-context.tsx\",\n        lineNumber: 600,\n        columnNumber: 5\n    }, this);\n}\n_s(BalanceProvider, \"POAcz33OynyifUzea+3OmW5xN3M=\", false, function() {\n    return [\n        _auth_context__WEBPACK_IMPORTED_MODULE_2__.useAuth,\n        _enhanced_market_data_context__WEBPACK_IMPORTED_MODULE_3__.useEnhancedMarket,\n        _hooks_use_toast__WEBPACK_IMPORTED_MODULE_4__.useToast,\n        _simple_enhanced_logs_context__WEBPACK_IMPORTED_MODULE_5__.useSimpleEnhancedLogs\n    ];\n});\n_c = BalanceProvider;\nfunction useBalance() {\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(BalanceContext);\n    if (context === undefined) {\n        throw new Error(\"useBalance must be used within an BalanceProvider\");\n    }\n    return context;\n}\n_s1(useBalance, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"BalanceProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb250ZXh0L2JhbGFuY2UtY29udGV4dC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBU2U7QUFVMEI7QUFDMEI7QUFDdEI7QUFDMEI7QUFDSjtBQTREbkUsTUFBTVksK0JBQWlCWCxvREFBYUEsQ0FBaUNZO0FBRTlELFNBQVNDLGdCQUFnQixLQUFxQztRQUFyQyxFQUFFQyxRQUFRLEVBQTJCLEdBQXJDOztJQUM5QixNQUFNLEVBQUVDLElBQUksRUFBRUMsVUFBVSxFQUFFLEdBQUdYLHNEQUFPQTtJQUNwQyxNQUFNLEVBQUVZLGNBQWMsRUFBRSxHQUFHWCxnRkFBaUJBO0lBQzVDLE1BQU0sRUFBRVksS0FBSyxFQUFFLEdBQUdYLDBEQUFRQTtJQUMxQixNQUFNLEVBQUVZLE1BQU0sRUFBRSxHQUFHWCxvRkFBcUJBO0lBRXhDLE1BQU0sQ0FBQ1ksVUFBVUMsWUFBWSxHQUFHbkIsK0NBQVFBLENBRXJDLENBQUM7SUFDSixNQUFNLENBQUNvQixhQUFhQyxlQUFlLEdBQUdyQiwrQ0FBUUEsQ0FBZSxFQUFFO0lBQy9ELE1BQU0sQ0FBQ3NCLFlBQVlDLGNBQWMsR0FBR3ZCLCtDQUFRQSxDQUFjLEVBQUU7SUFDNUQsTUFBTSxDQUFDd0Isc0JBQXNCQyx3QkFBd0IsR0FBR3pCLCtDQUFRQSxDQUU5RCxFQUFFO0lBQ0osTUFBTSxDQUFDMEIsa0JBQWtCQyxvQkFBb0IsR0FBRzNCLCtDQUFRQSxDQUV0RCxFQUFFO0lBQ0osTUFBTSxDQUFDNEIsV0FBV0MsYUFBYSxHQUFHN0IsK0NBQVFBLENBQUM7SUFFM0MsTUFBTSxDQUFDOEIsaUJBQWlCQyxtQkFBbUIsR0FBRy9CLCtDQUFRQTtJQUN0RCxNQUFNLENBQUNnQyxxQkFBcUJDLHVCQUF1QixHQUFHakMsK0NBQVFBLENBQUM7SUFFL0QsTUFBTWtDLHVCQUF1QmhDLGtEQUFXQTs2REFBQyxPQUFPaUM7WUFDOUMsSUFBSSxDQUFDM0Isa0VBQWlCQSxFQUFFO1lBQ3hCLE1B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TTlCLHlEQUFRQSxDQUFDNEUsR0FBRyxDQUFDLHdCQUF3QjtZQUNqRUMsV0FBV3ZFLEtBQUttRCxFQUFFO1FBQ3BCO1FBRUEsSUFBSTNCLE9BQU87WUFDVCxPQUFPO2dCQUFFNkcsU0FBUztnQkFBT0MsUUFBUTtnQkFBR3ZELFNBQVN2RCxNQUFNdUQsT0FBTztZQUFDO1FBQzdEO1FBRUEsT0FBTztZQUNMc0QsU0FBUzlHLEtBQUs4RyxPQUFPO1lBQ3JCQyxRQUFRL0csS0FBS2dILGFBQWE7WUFDMUJ4RCxTQUFTeEQsS0FBS3dELE9BQU87UUFDdkI7SUFDRjtJQUVBLE1BQU15RCxRQUE0QjtRQUNoQ25JO1FBQ0FrRjtRQUNBbUI7UUFDQTNGO1FBQ0FSO1FBQ0FFO1FBQ0F1RztRQUNBVztRQUNBaEg7UUFDQUU7UUFDQXVIO1FBQ0FuSDtRQUNBRTtRQUNBNkQ7UUFDQWQ7SUFDRjtJQUVBLHFCQUNFLDhEQUFDdEUsZUFBZTZJLFFBQVE7UUFBQ0QsT0FBT0E7a0JBQVF6STs7Ozs7O0FBRTVDO0dBcGdCZ0JEOztRQUNlUixrREFBT0E7UUFDVEMsNEVBQWlCQTtRQUMxQkMsc0RBQVFBO1FBQ1BDLGdGQUFxQkE7OztLQUoxQks7QUFzZ0JULFNBQVM0STs7SUFDZCxNQUFNQyxVQUFVekosaURBQVVBLENBQUNVO0lBQzNCLElBQUkrSSxZQUFZOUksV0FBVztRQUN6QixNQUFNLElBQUkrSSxNQUFNO0lBQ2xCO0lBQ0EsT0FBT0Q7QUFDVDtJQU5nQkQiLCJzb3VyY2VzIjpbIkQ6XFx4aWFuZ211XFxFZGdlLUZ1bmN0aW9uXFxjdG9hcHBcXHNyY1xcY29udGV4dFxcYmFsYW5jZS1jb250ZXh0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcblxuaW1wb3J0IFJlYWN0LCB7XG4gIGNyZWF0ZUNvbnRleHQsXG4gIHVzZUNvbnRleHQsXG4gIHVzZVN0YXRlLFxuICB1c2VFZmZlY3QsXG4gIFJlYWN0Tm9kZSxcbiAgdXNlQ2FsbGJhY2ssXG59IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtcbiAgQ29udHJhY3RUcmFkZSxcbiAgU3BvdFRyYWRlLFxuICBJbnZlc3RtZW50LFxuICBSZXdhcmRMb2csXG4gIFVzZXIsXG4gIEludmVzdG1lbnRUaWVyLFxuICBTZWN1cmVVc2VyLFxufSBmcm9tIFwiQC90eXBlc1wiO1xuaW1wb3J0IHsgdXNlQXV0aCB9IGZyb20gXCIuL2F1dGgtY29udGV4dFwiO1xuaW1wb3J0IHsgdXNlRW5oYW5jZWRNYXJrZXQgfSBmcm9tIFwiLi9lbmhhbmNlZC1tYXJrZXQtZGF0YS1jb250ZXh0XCI7XG5pbXBvcnQgeyB1c2VUb2FzdCB9IGZyb20gXCJAL2hvb2tzL3VzZS10b2FzdFwiO1xuaW1wb3J0IHsgdXNlU2ltcGxlRW5oYW5jZWRMb2dzIH0gZnJvbSBcIi4vc2ltcGxlLWVuaGFuY2VkLWxvZ3MtY29udGV4dFwiO1xuaW1wb3J0IHsgc3VwYWJhc2UsIGlzU3VwYWJhc2VFbmFibGVkIH0gZnJvbSBcIkAvbGliL3N1cGFiYXNlQ2xpZW50XCI7XG5cbmV4cG9ydCB0eXBlIERhaWx5SW52ZXN0bWVudFBhcmFtcyA9IHtcbiAgcHJvZHVjdE5hbWU6IHN0cmluZztcbiAgYW1vdW50OiBudW1iZXI7XG4gIGRhaWx5UmF0ZTogbnVtYmVyO1xuICBwZXJpb2Q6IG51bWJlcjtcbiAgY2F0ZWdvcnk6IFwic3Rha2luZ1wiIHwgXCJmaW5hbmNlXCI7XG4gIHN0YWtpbmdBc3NldD86IHN0cmluZztcbiAgc3Rha2luZ0Ftb3VudD86IG51bWJlcjtcbn07XG5cbmV4cG9ydCB0eXBlIEhvdXJseUludmVzdG1lbnRQYXJhbXMgPSB7XG4gIHByb2R1Y3ROYW1lOiBzdHJpbmc7XG4gIGFtb3VudDogbnVtYmVyO1xuICBkdXJhdGlvbkhvdXJzOiBudW1iZXI7XG4gIHRpZXJzOiBJbnZlc3RtZW50VGllcltdO1xuICBjYXRlZ29yeTogXCJzdGFraW5nXCIgfCBcImZpbmFuY2VcIjtcbn07XG5cbmludGVyZmFjZSBCYWxhbmNlQ29udGV4dFR5cGUge1xuICBiYWxhbmNlczogeyBba2V5OiBzdHJpbmddOiB7IGF2YWlsYWJsZTogbnVtYmVyOyBmcm96ZW46IG51bWJlciB9IH07XG4gIGludmVzdG1lbnRzOiBJbnZlc3RtZW50W107XG4gIHJld2FyZExvZ3M6IFJld2FyZExvZ1tdO1xuICBhZGREYWlseUludmVzdG1lbnQ6IChwYXJhbXM6IERhaWx5SW52ZXN0bWVudFBhcmFtcykgPT4gUHJvbWlzZTxib29sZWFuPjtcbiAgYWRkSG91cmx5SW52ZXN0bWVudDogKHBhcmFtczogSG91cmx5SW52ZXN0bWVudFBhcmFtcykgPT4gUHJvbWlzZTxib29sZWFuPjtcbiAgcGxhY2VDb250cmFjdFRyYWRlOiAoXG4gICAgdHJhZGU6IFBpY2s8Q29udHJhY3RUcmFkZSwgXCJ0eXBlXCIgfCBcImFtb3VudFwiIHwgXCJwZXJpb2RcIiB8IFwicHJvZml0X3JhdGVcIj4sXG4gICAgdHJhZGluZ1BhaXI6IHN0cmluZ1xuICApID0+IHZvaWQ7XG4gIHBsYWNlU3BvdFRyYWRlOiAoXG4gICAgdHJhZGU6IFBpY2s8U3BvdFRyYWRlLCBcInR5cGVcIiB8IFwiYW1vdW50XCIgfCBcInRvdGFsXCIgfCBcInRyYWRpbmdfcGFpclwiPlxuICApID0+IHZvaWQ7XG4gIGlzTG9hZGluZzogYm9vbGVhbjtcbiAgYWN0aXZlQ29udHJhY3RUcmFkZXM6IENvbnRyYWN0VHJhZGVbXTtcbiAgaGlzdG9yaWNhbFRyYWRlczogKFNwb3RUcmFkZSB8IENvbnRyYWN0VHJhZGUpW107XG4gIGhhbmRsZUNoZWNrSW46ICgpID0+IFByb21pc2U8e1xuICAgIHN1Y2Nlc3M6IGJvb2xlYW47XG4gICAgcmV3YXJkOiBudW1iZXI7XG4gICAgbWVzc2FnZT86IHN0cmluZztcbiAgfT47XG4gIGxhc3RDaGVja0luRGF0ZT86IHN0cmluZztcbiAgY29uc2VjdXRpdmVDaGVja0luczogbnVtYmVyO1xuICBjcmVkaXRSZXdhcmQ6IChwYXJhbXM6IHtcbiAgICB1c2VySWQ6IHN0cmluZztcbiAgICBhbW91bnQ6IG51bWJlcjtcbiAgICBhc3NldDogc3RyaW5nO1xuICAgIHR5cGU6IFJld2FyZExvZ1tcInR5cGVcIl07XG4gICAgc291cmNlSWQ6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICB9KSA9PiBQcm9taXNlPHZvaWQ+O1xuICBhZGp1c3RCYWxhbmNlOiAoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgYXNzZXQ6IHN0cmluZyxcbiAgICBhbW91bnQ6IG51bWJlcixcbiAgICBpc0Zyb3plbj86IGJvb2xlYW4sXG4gICAgaXNEZWJpdEZyb3plbj86IGJvb2xlYW5cbiAgKSA9PiBQcm9taXNlPHZvaWQ+O1xufVxuXG5jb25zdCBCYWxhbmNlQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8QmFsYW5jZUNvbnRleHRUeXBlIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuXG5leHBvcnQgZnVuY3Rpb24gQmFsYW5jZVByb3ZpZGVyKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogUmVhY3ROb2RlIH0pIHtcbiAgY29uc3QgeyB1c2VyLCB1cGRhdGVVc2VyIH0gPSB1c2VBdXRoKCk7XG4gIGNvbnN0IHsgZ2V0TGF0ZXN0UHJpY2UgfSA9IHVzZUVuaGFuY2VkTWFya2V0KCk7XG4gIGNvbnN0IHsgdG9hc3QgfSA9IHVzZVRvYXN0KCk7XG4gIGNvbnN0IHsgYWRkTG9nIH0gPSB1c2VTaW1wbGVFbmhhbmNlZExvZ3MoKTtcblxuICBjb25zdCBbYmFsYW5jZXMsIHNldEJhbGFuY2VzXSA9IHVzZVN0YXRlPHtcbiAgICBba2V5OiBzdHJpbmddOiB7IGF2YWlsYWJsZTogbnVtYmVyOyBmcm96ZW46IG51bWJlciB9O1xuICB9Pih7fSk7XG4gIGNvbnN0IFtpbnZlc3RtZW50cywgc2V0SW52ZXN0bWVudHNdID0gdXNlU3RhdGU8SW52ZXN0bWVudFtdPihbXSk7XG4gIGNvbnN0IFtyZXdhcmRMb2dzLCBzZXRSZXdhcmRMb2dzXSA9IHVzZVN0YXRlPFJld2FyZExvZ1tdPihbXSk7XG4gIGNvbnN0IFthY3RpdmVDb250cmFjdFRyYWRlcywgc2V0QWN0aXZlQ29udHJhY3RUcmFkZXNdID0gdXNlU3RhdGU8XG4gICAgQ29udHJhY3RUcmFkZVtdXG4gID4oW10pO1xuICBjb25zdCBbaGlzdG9yaWNhbFRyYWRlcywgc2V0SGlzdG9yaWNhbFRyYWRlc10gPSB1c2VTdGF0ZTxcbiAgICAoU3BvdFRyYWRlIHwgQ29udHJhY3RUcmFkZSlbXVxuICA+KFtdKTtcbiAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xuXG4gIGNvbnN0IFtsYXN0Q2hlY2tJbkRhdGUsIHNldExhc3RDaGVja0luRGF0ZV0gPSB1c2VTdGF0ZTxzdHJpbmcgfCB1bmRlZmluZWQ+KCk7XG4gIGNvbnN0IFtjb25zZWN1dGl2ZUNoZWNrSW5zLCBzZXRDb25zZWN1dGl2ZUNoZWNrSW5zXSA9IHVzZVN0YXRlKDApO1xuXG4gIGNvbnN0IGZldGNoVXNlckJhbGFuY2VEYXRhID0gdXNlQ2FsbGJhY2soYXN5bmMgKHVzZXJJZDogc3RyaW5nKSA9PiB7XG4gICAgaWYgKCFpc1N1cGFiYXNlRW5hYmxlZCkgcmV0dXJuO1xuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbShcImJhbGFuY2VzXCIpXG4gICAgICAuc2VsZWN0KFwiKlwiKVxuICAgICAgLmVxKFwidXNlcl9pZFwiLCB1c2VySWQpO1xuICAgIGlmIChlcnJvcikgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIGJhbGFuY2VzOlwiLCBlcnJvcik7XG4gICAgZWxzZSB7XG4gICAgICBjb25zdCBmb3JtYXR0ZWRCYWxhbmNlczoge1xuICAgICAgICBba2V5OiBzdHJpbmddOiB7IGF2YWlsYWJsZTogbnVtYmVyOyBmcm96ZW46IG51bWJlciB9O1xuICAgICAgfSA9IHt9O1xuICAgICAgZGF0YT8uZm9yRWFjaCgoYikgPT4ge1xuICAgICAgICBmb3JtYXR0ZWRCYWxhbmNlc1tiLmFzc2V0XSA9IHtcbiAgICAgICAgICBhdmFpbGFibGU6IGIuYXZhaWxhYmxlX2JhbGFuY2UsXG4gICAgICAgICAgZnJvemVuOiBiLmZyb3plbl9iYWxhbmNlLFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICBzZXRCYWxhbmNlcyhmb3JtYXR0ZWRCYWxhbmNlcyk7XG4gICAgfVxuICB9LCBbXSk7XG5cbiAgY29uc3QgZmV0Y2hVc2VyVHJhZGVEYXRhID0gdXNlQ2FsbGJhY2soYXN5bmMgKHVzZXJJZDogc3RyaW5nKSA9PiB7XG4gICAgaWYgKCFpc1N1cGFiYXNlRW5hYmxlZCkgcmV0dXJuO1xuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbShcInRyYWRlc1wiKVxuICAgICAgLnNlbGVjdChcIipcIilcbiAgICAgIC5lcShcInVzZXJfaWRcIiwgdXNlcklkKVxuICAgICAgLm9yZGVyKFwiY3JlYXRlZF9hdFwiLCB7IGFzY2VuZGluZzogZmFsc2UgfSk7XG4gICAgaWYgKGVycm9yKSBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgdHJhZGVzOlwiLCBlcnJvcik7XG4gICAgZWxzZSB7XG4gICAgICBzZXRBY3RpdmVDb250cmFjdFRyYWRlcyhcbiAgICAgICAgZGF0YS5maWx0ZXIoXG4gICAgICAgICAgKHQpID0+IHQub3JkZXJUeXBlID09PSBcImNvbnRyYWN0XCIgJiYgdC5zdGF0dXMgPT09IFwiYWN0aXZlXCJcbiAgICAgICAgKSBhcyBDb250cmFjdFRyYWRlW11cbiAgICAgICk7XG4gICAgICBzZXRIaXN0b3JpY2FsVHJhZGVzKFxuICAgICAgICBkYXRhLmZpbHRlcigodCkgPT4gdC5zdGF0dXMgIT09IFwiYWN0aXZlXCIpIGFzIChcbiAgICAgICAgICB8IFNwb3RUcmFkZVxuICAgICAgICAgIHwgQ29udHJhY3RUcmFkZVxuICAgICAgICApW11cbiAgICAgICk7XG4gICAgfVxuICB9LCBbXSk7XG5cbiAgY29uc3QgZmV0Y2hVc2VySW52ZXN0bWVudERhdGEgPSB1c2VDYWxsYmFjayhhc3luYyAodXNlcklkOiBzdHJpbmcpID0+IHtcbiAgICBpZiAoIWlzU3VwYWJhc2VFbmFibGVkKSByZXR1cm47XG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKFwiaW52ZXN0bWVudHNcIilcbiAgICAgIC5zZWxlY3QoXCIqXCIpXG4gICAgICAuZXEoXCJ1c2VyX2lkXCIsIHVzZXJJZClcbiAgICAgIC5vcmRlcihcImNyZWF0ZWRfYXRcIiwgeyBhc2NlbmRpbmc6IGZhbHNlIH0pO1xuICAgIGlmIChlcnJvcikgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIGludmVzdG1lbnRzOlwiLCBlcnJvcik7XG4gICAgZWxzZSBzZXRJbnZlc3RtZW50cyhkYXRhIGFzIEludmVzdG1lbnRbXSk7XG4gIH0sIFtdKTtcblxuICBjb25zdCBmZXRjaFVzZXJSZXdhcmRMb2dzID0gdXNlQ2FsbGJhY2soYXN5bmMgKHVzZXJJZDogc3RyaW5nKSA9PiB7XG4gICAgaWYgKCFpc1N1cGFiYXNlRW5hYmxlZCkgcmV0dXJuO1xuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbShcInJld2FyZF9sb2dzXCIpXG4gICAgICAuc2VsZWN0KFwiKlwiKVxuICAgICAgLmVxKFwidXNlcl9pZFwiLCB1c2VySWQpXG4gICAgICAub3JkZXIoXCJjcmVhdGVkX2F0XCIsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KTtcbiAgICBpZiAoZXJyb3IpIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyByZXdhcmQgbG9nczpcIiwgZXJyb3IpO1xuICAgIGVsc2Ugc2V0UmV3YXJkTG9ncyhkYXRhIGFzIFJld2FyZExvZ1tdKTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IGZldGNoVXNlclByb2ZpbGVGb3JDaGVja2luID0gdXNlQ2FsbGJhY2soYXN5bmMgKHVzZXJJZDogc3RyaW5nKSA9PiB7XG4gICAgaWYgKCFpc1N1cGFiYXNlRW5hYmxlZCkgcmV0dXJuO1xuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbShcInByb2ZpbGVzXCIpXG4gICAgICAuc2VsZWN0KFwibGFzdF9jaGVja19pbl9kYXRlLCBjb25zZWN1dGl2ZV9jaGVja19pbnNcIilcbiAgICAgIC5lcShcImlkXCIsIHVzZXJJZClcbiAgICAgIC5zaW5nbGUoKTtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyB1c2VyIHByb2ZpbGUgZm9yIGNoZWNrLWluOlwiLCBlcnJvcik7XG4gICAgfSBlbHNlIGlmIChkYXRhKSB7XG4gICAgICBzZXRMYXN0Q2hlY2tJbkRhdGUoZGF0YS5sYXN0X2NoZWNrX2luX2RhdGUpO1xuICAgICAgc2V0Q29uc2VjdXRpdmVDaGVja0lucyhkYXRhLmNvbnNlY3V0aXZlX2NoZWNrX2lucyB8fCAwKTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGxvYWRBbGxEYXRhID0gYXN5bmMgKCkgPT4ge1xuICAgICAgc2V0SXNMb2FkaW5nKHRydWUpO1xuICAgICAgaWYgKHVzZXI/LmlkICYmIGlzU3VwYWJhc2VFbmFibGVkKSB7XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICBmZXRjaFVzZXJCYWxhbmNlRGF0YSh1c2VyLmlkKSxcbiAgICAgICAgICBmZXRjaFVzZXJUcmFkZURhdGEodXNlci5pZCksXG4gICAgICAgICAgZmV0Y2hVc2VySW52ZXN0bWVudERhdGEodXNlci5pZCksXG4gICAgICAgICAgZmV0Y2hVc2VyUmV3YXJkTG9ncyh1c2VyLmlkKSxcbiAgICAgICAgICBmZXRjaFVzZXJQcm9maWxlRm9yQ2hlY2tpbih1c2VyLmlkKSxcbiAgICAgICAgXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBDbGVhciBkYXRhIG9uIGxvZ291dFxuICAgICAgICBzZXRCYWxhbmNlcyh7fSk7XG4gICAgICAgIHNldEludmVzdG1lbnRzKFtdKTtcbiAgICAgICAgc2V0UmV3YXJkTG9ncyhbXSk7XG4gICAgICAgIHNldEFjdGl2ZUNvbnRyYWN0VHJhZGVzKFtdKTtcbiAgICAgICAgc2V0SGlzdG9yaWNhbFRyYWRlcyhbXSk7XG4gICAgICAgIHNldExhc3RDaGVja0luRGF0ZSh1bmRlZmluZWQpO1xuICAgICAgICBzZXRDb25zZWN1dGl2ZUNoZWNrSW5zKDApO1xuICAgICAgfVxuICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICB9O1xuICAgIGxvYWRBbGxEYXRhKCk7XG4gIH0sIFtcbiAgICB1c2VyLFxuICAgIGlzU3VwYWJhc2VFbmFibGVkLFxuICAgIGZldGNoVXNlckJhbGFuY2VEYXRhLFxuICAgIGZldGNoVXNlclRyYWRlRGF0YSxcbiAgICBmZXRjaFVzZXJJbnZlc3RtZW50RGF0YSxcbiAgICBmZXRjaFVzZXJSZXdhcmRMb2dzLFxuICAgIGZldGNoVXNlclByb2ZpbGVGb3JDaGVja2luLFxuICBdKTtcblxuICAvLyBSZWFsdGltZSBTdWJzY3JpcHRpb25zXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCF1c2VyIHx8ICFpc1N1cGFiYXNlRW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgY29uc3QgaGFuZGxlRGF0YUNoYW5nZSA9ICgpID0+IHtcbiAgICAgIGlmICghdXNlcikgcmV0dXJuO1xuICAgICAgZmV0Y2hVc2VyVHJhZGVEYXRhKHVzZXIuaWQpO1xuICAgICAgZmV0Y2hVc2VySW52ZXN0bWVudERhdGEodXNlci5pZCk7XG4gICAgICBmZXRjaFVzZXJCYWxhbmNlRGF0YSh1c2VyLmlkKTtcbiAgICAgIGZldGNoVXNlclByb2ZpbGVGb3JDaGVja2luKHVzZXIuaWQpO1xuICAgIH07XG5cbiAgICBjb25zdCB0cmFkZXNDaGFubmVsID0gc3VwYWJhc2VcbiAgICAgIC5jaGFubmVsKGB0cmFkZXMtY2hhbm5lbC0ke3VzZXIuaWR9YClcbiAgICAgIC5vbihcbiAgICAgICAgXCJwb3N0Z3Jlc19jaGFuZ2VzXCIsXG4gICAgICAgIHtcbiAgICAgICAgICBldmVudDogXCIqXCIsXG4gICAgICAgICAgc2NoZW1hOiBcInB1YmxpY1wiLFxuICAgICAgICAgIHRhYmxlOiBcInRyYWRlc1wiLFxuICAgICAgICAgIGZpbHRlcjogYHVzZXJfaWQ9ZXEuJHt1c2VyLmlkfWAsXG4gICAgICAgIH0sXG4gICAgICAgIGhhbmRsZURhdGFDaGFuZ2VcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUoKTtcblxuICAgIGNvbnN0IGludmVzdG1lbnRzQ2hhbm5lbCA9IHN1cGFiYXNlXG4gICAgICAuY2hhbm5lbChgaW52ZXN0bWVudHMtY2hhbm5lbC0ke3VzZXIuaWR9YClcbiAgICAgIC5vbihcbiAgICAgICAgXCJwb3N0Z3Jlc19jaGFuZ2VzXCIsXG4gICAgICAgIHtcbiAgICAgICAgICBldmVudDogXCIqXCIsXG4gICAgICAgICAgc2NoZW1hOiBcInB1YmxpY1wiLFxuICAgICAgICAgIHRhYmxlOiBcImludmVzdG1lbnRzXCIsXG4gICAgICAgICAgZmlsdGVyOiBgdXNlcl9pZD1lcS4ke3VzZXIuaWR9YCxcbiAgICAgICAgfSxcbiAgICAgICAgaGFuZGxlRGF0YUNoYW5nZVxuICAgICAgKVxuICAgICAgLnN1YnNjcmliZSgpO1xuXG4gICAgY29uc3QgYmFsYW5jZXNDaGFubmVsID0gc3VwYWJhc2VcbiAgICAgIC5jaGFubmVsKGBiYWxhbmNlcy1jaGFubmVsLSR7dXNlci5pZH1gKVxuICAgICAgLm9uKFxuICAgICAgICBcInBvc3RncmVzX2NoYW5nZXNcIixcbiAgICAgICAge1xuICAgICAgICAgIGV2ZW50OiBcIipcIixcbiAgICAgICAgICBzY2hlbWE6IFwicHVibGljXCIsXG4gICAgICAgICAgdGFibGU6IFwiYmFsYW5jZXNcIixcbiAgICAgICAgICBmaWx0ZXI6IGB1c2VyX2lkPWVxLiR7dXNlci5pZH1gLFxuICAgICAgICB9LFxuICAgICAgICBoYW5kbGVEYXRhQ2hhbmdlXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKCk7XG5cbiAgICBjb25zdCBwcm9maWxlQ2hhbm5lbCA9IHN1cGFiYXNlXG4gICAgICAuY2hhbm5lbChgcHJvZmlsZS1jaGFubmVsLSR7dXNlci5pZH1gKVxuICAgICAgLm9uKFxuICAgICAgICBcInBvc3RncmVzX2NoYW5nZXNcIixcbiAgICAgICAge1xuICAgICAgICAgIGV2ZW50OiBcIlVQREFURVwiLFxuICAgICAgICAgIHNjaGVtYTogXCJwdWJsaWNcIixcbiAgICAgICAgICB0YWJsZTogXCJwcm9maWxlc1wiLFxuICAgICAgICAgIGZpbHRlcjogYGlkPWVxLiR7dXNlci5pZH1gLFxuICAgICAgICB9LFxuICAgICAgICBoYW5kbGVEYXRhQ2hhbmdlXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKCk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc3VwYWJhc2UucmVtb3ZlQ2hhbm5lbCh0cmFkZXNDaGFubmVsKTtcbiAgICAgIHN1cGFiYXNlLnJlbW92ZUNoYW5uZWwoaW52ZXN0bWVudHNDaGFubmVsKTtcbiAgICAgIHN1cGFiYXNlLnJlbW92ZUNoYW5uZWwoYmFsYW5jZXNDaGFubmVsKTtcbiAgICAgIHN1cGFiYXNlLnJlbW92ZUNoYW5uZWwocHJvZmlsZUNoYW5uZWwpO1xuICAgIH07XG4gIH0sIFtcbiAgICB1c2VyLFxuICAgIGlzU3VwYWJhc2VFbmFibGVkLFxuICAgIGZldGNoVXNlclRyYWRlRGF0YSxcbiAgICBmZXRjaFVzZXJJbnZlc3RtZW50RGF0YSxcbiAgICBmZXRjaFVzZXJCYWxhbmNlRGF0YSxcbiAgICBmZXRjaFVzZXJQcm9maWxlRm9yQ2hlY2tpbixcbiAgXSk7XG5cbiAgY29uc3QgYWRqdXN0QmFsYW5jZSA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jIChcbiAgICAgIHVzZXJJZDogc3RyaW5nLFxuICAgICAgYXNzZXQ6IHN0cmluZyxcbiAgICAgIGFtb3VudDogbnVtYmVyLFxuICAgICAgaXNGcm96ZW46IGJvb2xlYW4gPSBmYWxzZSxcbiAgICAgIGlzRGViaXRGcm96ZW46IGJvb2xlYW4gPSBmYWxzZVxuICAgICkgPT4ge1xuICAgICAgaWYgKCFpc1N1cGFiYXNlRW5hYmxlZCkgcmV0dXJuO1xuICAgICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UucnBjKFwiYWRqdXN0X2JhbGFuY2VcIiwge1xuICAgICAgICBwX3VzZXJfaWQ6IHVzZXJJZCxcbiAgICAgICAgcF9hc3NldDogYXNzZXQsXG4gICAgICAgIHBfYW1vdW50OiBhbW91bnQsXG4gICAgICAgIHBfaXNfZnJvemVuOiBpc0Zyb3plbixcbiAgICAgICAgcF9pc19kZWJpdF9mcm96ZW46IGlzRGViaXRGcm96ZW4sXG4gICAgICB9KTtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWRqdXN0aW5nIGJhbGFuY2U6XCIsIGVycm9yKTtcbiAgICAgICAgaWYgKHVzZXI/LmlkID09PSB1c2VySWQpIHtcbiAgICAgICAgICB0b2FzdCh7XG4gICAgICAgICAgICB2YXJpYW50OiBcImRlc3RydWN0aXZlXCIsXG4gICAgICAgICAgICB0aXRsZTogXCJCYWxhbmNlIFVwZGF0ZSBGYWlsZWRcIixcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodXNlcj8uaWQgPT09IHVzZXJJZCkge1xuICAgICAgICAgIGZldGNoVXNlckJhbGFuY2VEYXRhKHVzZXJJZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFt0b2FzdCwgdXNlcj8uaWQsIGZldGNoVXNlckJhbGFuY2VEYXRhXVxuICApO1xuXG4gIGNvbnN0IGNyZWRpdFJld2FyZCA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jIChwYXJhbXM6IHtcbiAgICAgIHVzZXJJZDogc3RyaW5nO1xuICAgICAgYW1vdW50OiBudW1iZXI7XG4gICAgICBhc3NldDogc3RyaW5nO1xuICAgICAgdHlwZTogUmV3YXJkTG9nW1widHlwZVwiXTtcbiAgICAgIHNvdXJjZUlkOiBzdHJpbmc7XG4gICAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIH0pID0+IHtcbiAgICAgIGlmICghaXNTdXBhYmFzZUVuYWJsZWQpIHJldHVybjtcbiAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLnJwYyhcImNyZWRpdF9yZXdhcmRcIiwge1xuICAgICAgICBwX3VzZXJfaWQ6IHBhcmFtcy51c2VySWQsXG4gICAgICAgIHBfYW1vdW50OiBwYXJhbXMuYW1vdW50LFxuICAgICAgICBwX2Fzc2V0OiBwYXJhbXMuYXNzZXQsXG4gICAgICAgIHBfcmV3YXJkX3R5cGU6IHBhcmFtcy50eXBlLFxuICAgICAgICBwX3NvdXJjZV9pZDogcGFyYW1zLnNvdXJjZUlkLFxuICAgICAgICBwX2Rlc2NyaXB0aW9uOiBwYXJhbXMuZGVzY3JpcHRpb24sXG4gICAgICB9KTtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgY3JlZGl0aW5nIHJld2FyZDpcIiwgZXJyb3IpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW11cbiAgKTtcblxuICBjb25zdCBwbGFjZUNvbnRyYWN0VHJhZGUgPSB1c2VDYWxsYmFjayhcbiAgICBhc3luYyAoXG4gICAgICB0cmFkZTogUGljazxDb250cmFjdFRyYWRlLCBcInR5cGVcIiB8IFwiYW1vdW50XCIgfCBcInBlcmlvZFwiIHwgXCJwcm9maXRfcmF0ZVwiPixcbiAgICAgIHRyYWRpbmdQYWlyOiBzdHJpbmdcbiAgICApID0+IHtcbiAgICAgIGlmICghdXNlciB8fCAhaXNTdXBhYmFzZUVuYWJsZWQpIHJldHVybjtcblxuICAgICAgaWYgKHVzZXIuaXNfZnJvemVuKSB7XG4gICAgICAgIHRvYXN0KHtcbiAgICAgICAgICB2YXJpYW50OiBcImRlc3RydWN0aXZlXCIsXG4gICAgICAgICAgdGl0bGU6IFwiQWN0aW9uIEZhaWxlZFwiLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIllvdXIgYWNjb3VudCBpcyBmcm96ZW4uXCIsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHF1b3RlQXNzZXQgPSB0cmFkaW5nUGFpci5zcGxpdChcIi9cIilbMV07XG4gICAgICBjb25zdCBjdXJyZW50UHJpY2UgPSBnZXRMYXRlc3RQcmljZSh0cmFkaW5nUGFpcik7XG5cbiAgICAgIGlmICgoYmFsYW5jZXNbcXVvdGVBc3NldF0/LmF2YWlsYWJsZSB8fCAwKSA8IHRyYWRlLmFtb3VudCkge1xuICAgICAgICB0b2FzdCh7XG4gICAgICAgICAgdmFyaWFudDogXCJkZXN0cnVjdGl2ZVwiLFxuICAgICAgICAgIHRpdGxlOiBcIuS4i+WNleWksei0pVwiLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBg5Y+v55SoICR7cXVvdGVBc3NldH0g5L2Z6aKd5LiN6Laz44CCYCxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbmV3VHJhZGU6IE9taXQ8Q29udHJhY3RUcmFkZSwgXCJpZFwiIHwgXCJjcmVhdGVkX2F0XCI+ID0ge1xuICAgICAgICB1c2VyX2lkOiB1c2VyLmlkLFxuICAgICAgICB0cmFkaW5nX3BhaXI6IHRyYWRpbmdQYWlyLFxuICAgICAgICB0eXBlOiB0cmFkZS50eXBlLFxuICAgICAgICBhbW91bnQ6IHRyYWRlLmFtb3VudCxcbiAgICAgICAgZW50cnlfcHJpY2U6IGN1cnJlbnRQcmljZSxcbiAgICAgICAgc2V0dGxlbWVudF90aW1lOiBuZXcgRGF0ZShcbiAgICAgICAgICBEYXRlLm5vdygpICsgdHJhZGUucGVyaW9kICogMTAwMFxuICAgICAgICApLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIHBlcmlvZDogdHJhZGUucGVyaW9kLFxuICAgICAgICBwcm9maXRfcmF0ZTogdHJhZGUucHJvZml0X3JhdGUsXG4gICAgICAgIHN0YXR1czogXCJhY3RpdmVcIixcbiAgICAgICAgb3JkZXJUeXBlOiBcImNvbnRyYWN0XCIsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCB7IGRhdGE6IGluc2VydGVkVHJhZGUsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbShcInRyYWRlc1wiKVxuICAgICAgICAuaW5zZXJ0KG5ld1RyYWRlKVxuICAgICAgICAuc2VsZWN0KClcbiAgICAgICAgLnNpbmdsZSgpO1xuXG4gICAgICBpZiAoZXJyb3IgfHwgIWluc2VydGVkVHJhZGUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBwbGFjZSBjb250cmFjdCB0cmFkZTpcIiwgZXJyb3IpO1xuICAgICAgICB0b2FzdCh7XG4gICAgICAgICAgdmFyaWFudDogXCJkZXN0cnVjdGl2ZVwiLFxuICAgICAgICAgIHRpdGxlOiBcIuS4i+WNleWksei0pVwiLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIuaXoOazleS/neWtmOS6pOaYk+iusOW9le+8jOivt+mHjeivleOAglwiLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0b2FzdCh7IHRpdGxlOiBcIuS4i+WNleaIkOWKn1wiLCBkZXNjcmlwdGlvbjogXCLmgqjnmoTlkIjnuqborqLljZXlt7LmiJDlip/lu7rnq4vjgIJcIiB9KTtcbiAgICB9LFxuICAgIFt1c2VyLCBiYWxhbmNlcywgZ2V0TGF0ZXN0UHJpY2UsIHRvYXN0XVxuICApO1xuXG4gIGNvbnN0IHBsYWNlU3BvdFRyYWRlID0gdXNlQ2FsbGJhY2soXG4gICAgYXN5bmMgKFxuICAgICAgdHJhZGU6IFBpY2s8U3BvdFRyYWRlLCBcInR5cGVcIiB8IFwiYW1vdW50XCIgfCBcInRvdGFsXCIgfCBcInRyYWRpbmdfcGFpclwiPlxuICAgICkgPT4ge1xuICAgICAgaWYgKCF1c2VyIHx8ICFpc1N1cGFiYXNlRW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgICBpZiAodXNlci5pc19mcm96ZW4pIHtcbiAgICAgICAgdG9hc3Qoe1xuICAgICAgICAgIHZhcmlhbnQ6IFwiZGVzdHJ1Y3RpdmVcIixcbiAgICAgICAgICB0aXRsZTogXCJBY3Rpb24gRmFpbGVkXCIsXG4gICAgICAgICAgZGVzY3JpcHRpb246IFwiWW91ciBhY2NvdW50IGlzIGZyb3plbi5cIixcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgW2Jhc2VBc3NldCwgcXVvdGVBc3NldF0gPSB0cmFkZS50cmFkaW5nX3BhaXIuc3BsaXQoXCIvXCIpO1xuXG4gICAgICBpZiAoXG4gICAgICAgIHRyYWRlLnR5cGUgPT09IFwiYnV5XCIgJiZcbiAgICAgICAgKGJhbGFuY2VzW3F1b3RlQXNzZXRdPy5hdmFpbGFibGUgfHwgMCkgPCB0cmFkZS50b3RhbFxuICAgICAgKSB7XG4gICAgICAgIHRvYXN0KHtcbiAgICAgICAgICB2YXJpYW50OiBcImRlc3RydWN0aXZlXCIsXG4gICAgICAgICAgdGl0bGU6IFwi5LiL5Y2V5aSx6LSlXCIsXG4gICAgICAgICAgZGVzY3JpcHRpb246IGDlj6/nlKggJHtxdW90ZUFzc2V0fSDkvZnpop3kuI3otrPjgIJgLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICB0cmFkZS50eXBlID09PSBcInNlbGxcIiAmJlxuICAgICAgICAoYmFsYW5jZXNbYmFzZUFzc2V0XT8uYXZhaWxhYmxlIHx8IDApIDwgdHJhZGUuYW1vdW50XG4gICAgICApIHtcbiAgICAgICAgdG9hc3Qoe1xuICAgICAgICAgIHZhcmlhbnQ6IFwiZGVzdHJ1Y3RpdmVcIixcbiAgICAgICAgICB0aXRsZTogXCLkuIvljZXlpLHotKVcIixcbiAgICAgICAgICBkZXNjcmlwdGlvbjogYOWPr+eUqCAke2Jhc2VBc3NldH0g5L2Z6aKd5LiN6Laz44CCYCxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY3VycmVudFByaWNlID0gZ2V0TGF0ZXN0UHJpY2UodHJhZGUudHJhZGluZ19wYWlyKTtcbiAgICAgIGNvbnN0IG5ld1RyYWRlOiBPbWl0PFNwb3RUcmFkZSwgXCJpZFwiIHwgXCJjcmVhdGVkX2F0XCI+ID0ge1xuICAgICAgICB0eXBlOiB0cmFkZS50eXBlLFxuICAgICAgICBhbW91bnQ6IHRyYWRlLmFtb3VudCxcbiAgICAgICAgdG90YWw6IHRyYWRlLnRvdGFsLFxuICAgICAgICBwcmljZTogY3VycmVudFByaWNlLFxuICAgICAgICB1c2VyX2lkOiB1c2VyLmlkLFxuICAgICAgICB0cmFkaW5nX3BhaXI6IHRyYWRlLnRyYWRpbmdfcGFpcixcbiAgICAgICAgYmFzZV9hc3NldDogYmFzZUFzc2V0LFxuICAgICAgICBxdW90ZV9hc3NldDogcXVvdGVBc3NldCxcbiAgICAgICAgc3RhdHVzOiBcImZpbGxlZFwiLFxuICAgICAgICBvcmRlclR5cGU6IFwic3BvdFwiLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgeyBkYXRhOiBpbnNlcnRlZFRyYWRlLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oXCJ0cmFkZXNcIilcbiAgICAgICAgLmluc2VydChuZXdUcmFkZSlcbiAgICAgICAgLnNlbGVjdCgpXG4gICAgICAgIC5zaW5nbGUoKTtcbiAgICAgIGlmIChlcnJvciB8fCAhaW5zZXJ0ZWRUcmFkZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIHBsYWNlIHNwb3QgdHJhZGU6XCIsIGVycm9yKTtcbiAgICAgICAgdG9hc3Qoe1xuICAgICAgICAgIHZhcmlhbnQ6IFwiZGVzdHJ1Y3RpdmVcIixcbiAgICAgICAgICB0aXRsZTogXCLkuIvljZXlpLHotKVcIixcbiAgICAgICAgICBkZXNjcmlwdGlvbjogXCLml6Dms5Xkv53lrZjkuqTmmJPorrDlvZXvvIzor7fogZTns7vlrqLmnI3jgIJcIixcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdG9hc3QoeyB0aXRsZTogXCLkuqTmmJPmiJDlip9cIiwgZGVzY3JpcHRpb246IFwi5oKo55qE5biB5biB5Lqk5piT5bey5a6M5oiQ44CCXCIgfSk7XG4gICAgfSxcbiAgICBbdXNlciwgYmFsYW5jZXMsIGdldExhdGVzdFByaWNlLCB0b2FzdF1cbiAgKTtcblxuICBjb25zdCBhZGREYWlseUludmVzdG1lbnQgPSBhc3luYyAocGFyYW1zOiBEYWlseUludmVzdG1lbnRQYXJhbXMpID0+IHtcbiAgICBpZiAoIXVzZXIgfHwgIWlzU3VwYWJhc2VFbmFibGVkKSByZXR1cm4gZmFsc2U7XG5cbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5ycGMoXCJjcmVhdGVfZGFpbHlfaW52ZXN0bWVudFwiLCB7XG4gICAgICBwX3VzZXJfaWQ6IHVzZXIuaWQsXG4gICAgICBwX3Byb2R1Y3RfbmFtZTogcGFyYW1zLnByb2R1Y3ROYW1lLFxuICAgICAgcF9hbW91bnQ6IHBhcmFtcy5hbW91bnQsXG4gICAgICBwX2RhaWx5X3JhdGU6IHBhcmFtcy5kYWlseVJhdGUsXG4gICAgICBwX3BlcmlvZDogcGFyYW1zLnBlcmlvZCxcbiAgICAgIHBfY2F0ZWdvcnk6IFwic3Rha2luZ1wiLFxuICAgICAgcF9zdGFraW5nX2Fzc2V0OiBwYXJhbXMuc3Rha2luZ0Fzc2V0LFxuICAgICAgcF9zdGFraW5nX2Ftb3VudDogcGFyYW1zLnN0YWtpbmdBbW91bnQsXG4gICAgfSk7XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gYWRkIGRhaWx5IGludmVzdG1lbnQ6XCIsIGVycm9yKTtcbiAgICAgIHRvYXN0KHtcbiAgICAgICAgdmFyaWFudDogXCJkZXN0cnVjdGl2ZVwiLFxuICAgICAgICB0aXRsZTogXCLotK3kubDlpLHotKVcIixcbiAgICAgICAgZGVzY3JpcHRpb246IGVycm9yLm1lc3NhZ2UsXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgY29uc3QgYWRkSG91cmx5SW52ZXN0bWVudCA9IGFzeW5jIChwYXJhbXM6IEhvdXJseUludmVzdG1lbnRQYXJhbXMpID0+IHtcbiAgICBpZiAoIXVzZXIgfHwgIWlzU3VwYWJhc2VFbmFibGVkKSByZXR1cm4gZmFsc2U7XG5cbiAgICBjb25zdCBzZWxlY3RlZFRpZXIgPSBwYXJhbXMudGllcnMuZmluZChcbiAgICAgICh0KSA9PiB0LmhvdXJzID09PSBwYXJhbXMuZHVyYXRpb25Ib3Vyc1xuICAgICk7XG4gICAgaWYgKCFzZWxlY3RlZFRpZXIpIHJldHVybiBmYWxzZTtcblxuICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLnJwYyhcImNyZWF0ZV9ob3VybHlfaW52ZXN0bWVudFwiLCB7XG4gICAgICBwX3VzZXJfaWQ6IHVzZXIuaWQsXG4gICAgICBwX3Byb2R1Y3RfbmFtZTogcGFyYW1zLnByb2R1Y3ROYW1lLFxuICAgICAgcF9hbW91bnQ6IHBhcmFtcy5hbW91bnQsXG4gICAgICBwX2R1cmF0aW9uX2hvdXJzOiBwYXJhbXMuZHVyYXRpb25Ib3VycyxcbiAgICAgIHBfaG91cmx5X3JhdGU6IHNlbGVjdGVkVGllci5yYXRlLFxuICAgIH0pO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIGFkZCBob3VybHkgaW52ZXN0bWVudDpcIiwgZXJyb3IpO1xuICAgICAgdG9hc3Qoe1xuICAgICAgICB2YXJpYW50OiBcImRlc3RydWN0aXZlXCIsXG4gICAgICAgIHRpdGxlOiBcIui0reS5sOWksei0pVwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogZXJyb3IubWVzc2FnZSxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVDaGVja0luID0gYXN5bmMgKCk6IFByb21pc2U8e1xuICAgIHN1Y2Nlc3M6IGJvb2xlYW47XG4gICAgcmV3YXJkOiBudW1iZXI7XG4gICAgbWVzc2FnZT86IHN0cmluZztcbiAgfT4gPT4ge1xuICAgIGlmICghdXNlciB8fCAhaXNTdXBhYmFzZUVuYWJsZWQpIHtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCByZXdhcmQ6IDAsIG1lc3NhZ2U6IFwiVXNlciBub3QgbG9nZ2VkIGluLlwiIH07XG4gICAgfVxuXG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UucnBjKFwiaGFuZGxlX3VzZXJfY2hlY2tfaW5cIiwge1xuICAgICAgcF91c2VyX2lkOiB1c2VyLmlkLFxuICAgIH0pO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgcmV3YXJkOiAwLCBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IGRhdGEuc3VjY2VzcyxcbiAgICAgIHJld2FyZDogZGF0YS5yZXdhcmRfYW1vdW50LFxuICAgICAgbWVzc2FnZTogZGF0YS5tZXNzYWdlLFxuICAgIH07XG4gIH07XG5cbiAgY29uc3QgdmFsdWU6IEJhbGFuY2VDb250ZXh0VHlwZSA9IHtcbiAgICBiYWxhbmNlcyxcbiAgICBwbGFjZUNvbnRyYWN0VHJhZGUsXG4gICAgcGxhY2VTcG90VHJhZGUsXG4gICAgaXNMb2FkaW5nLFxuICAgIGludmVzdG1lbnRzLFxuICAgIHJld2FyZExvZ3MsXG4gICAgYWRkRGFpbHlJbnZlc3RtZW50LFxuICAgIGFkZEhvdXJseUludmVzdG1lbnQsXG4gICAgYWN0aXZlQ29udHJhY3RUcmFkZXMsXG4gICAgaGlzdG9yaWNhbFRyYWRlcyxcbiAgICBoYW5kbGVDaGVja0luLFxuICAgIGxhc3RDaGVja0luRGF0ZSxcbiAgICBjb25zZWN1dGl2ZUNoZWNrSW5zLFxuICAgIGNyZWRpdFJld2FyZCxcbiAgICBhZGp1c3RCYWxhbmNlLFxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPEJhbGFuY2VDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt2YWx1ZX0+e2NoaWxkcmVufTwvQmFsYW5jZUNvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VCYWxhbmNlKCkge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChCYWxhbmNlQ29udGV4dCk7XG4gIGlmIChjb250ZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1c2VCYWxhbmNlIG11c3QgYmUgdXNlZCB3aXRoaW4gYW4gQmFsYW5jZVByb3ZpZGVyXCIpO1xuICB9XG4gIHJldHVybiBjb250ZXh0O1xufVxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiY3JlYXRlQ29udGV4dCIsInVzZUNvbnRleHQiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUNhbGxiYWNrIiwidXNlQXV0aCIsInVzZUVuaGFuY2VkTWFya2V0IiwidXNlVG9hc3QiLCJ1c2VTaW1wbGVFbmhhbmNlZExvZ3MiLCJzdXBhYmFzZSIsImlzU3VwYWJhc2VFbmFibGVkIiwiQmFsYW5jZUNvbnRleHQiLCJ1bmRlZmluZWQiLCJCYWxhbmNlUHJvdmlkZXIiLCJjaGlsZHJlbiIsInVzZXIiLCJ1cGRhdGVVc2VyIiwiZ2V0TGF0ZXN0UHJpY2UiLCJ0b2FzdCIsImFkZExvZyIsImJhbGFuY2VzIiwic2V0QmFsYW5jZXMiLCJpbnZlc3RtZW50cyIsInNldEludmVzdG1lbnRzIiwicmV3YXJkTG9ncyIsInNldFJld2FyZExvZ3MiLCJhY3RpdmVDb250cmFjdFRyYWRlcyIsInNldEFjdGl2ZUNvbnRyYWN0VHJhZGVzIiwiaGlzdG9yaWNhbFRyYWRlcyIsInNldEhpc3RvcmljYWxUcmFkZXMiLCJpc0xvYWRpbmciLCJzZXRJc0xvYWRpbmciLCJsYXN0Q2hlY2tJbkRhdGUiLCJzZXRMYXN0Q2hlY2tJbkRhdGUiLCJjb25zZWN1dGl2ZUNoZWNrSW5zIiwic2V0Q29uc2VjdXRpdmVDaGVja0lucyIsImZldGNoVXNlckJhbGFuY2VEYXRhIiwidXNlcklkIiwiZGF0YSIsImVycm9yIiwiZnJvbSIsInNlbGVjdCIsImVxIiwiY29uc29sZSIsImZvcm1hdHRlZEJhbGFuY2VzIiwiZm9yRWFjaCIsImIiLCJhc3NldCIsImF2YWlsYWJsZSIsImF2YWlsYWJsZV9iYWxhbmNlIiwiZnJvemVuIiwiZnJvemVuX2JhbGFuY2UiLCJmZXRjaFVzZXJUcmFkZURhdGEiLCJvcmRlciIsImFzY2VuZGluZyIsImZpbHRlciIsInQiLCJvcmRlclR5cGUiLCJzdGF0dXMiLCJmZXRjaFVzZXJJbnZlc3RtZW50RGF0YSIsImZldGNoVXNlclJld2FyZExvZ3MiLCJmZXRjaFVzZXJQcm9maWxlRm9yQ2hlY2tpbiIsInNpbmdsZSIsImxhc3RfY2hlY2tfaW5fZGF0ZSIsImNvbnNlY3V0aXZlX2NoZWNrX2lucyIsImxvYWRBbGxEYXRhIiwiaWQiLCJQcm9taXNlIiwiYWxsIiwiaGFuZGxlRGF0YUNoYW5nZSIsInRyYWRlc0NoYW5uZWwiLCJjaGFubmVsIiwib24iLCJldmVudCIsInNjaGVtYSIsInRhYmxlIiwic3Vic2NyaWJlIiwiaW52ZXN0bWVudHNDaGFubmVsIiwiYmFsYW5jZXNDaGFubmVsIiwicHJvZmlsZUNoYW5uZWwiLCJyZW1vdmVDaGFubmVsIiwiYWRqdXN0QmFsYW5jZSIsImFtb3VudCIsImlzRnJvemVuIiwiaXNEZWJpdEZyb3plbiIsInJwYyIsInBfdXNlcl9pZCIsInBfYXNzZXQiLCJwX2Ftb3VudCIsInBfaXNfZnJvemVuIiwicF9pc19kZWJpdF9mcm96ZW4iLCJ2YXJpYW50IiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsIm1lc3NhZ2UiLCJjcmVkaXRSZXdhcmQiLCJwYXJhbXMiLCJwX3Jld2FyZF90eXBlIiwidHlwZSIsInBfc291cmNlX2lkIiwic291cmNlSWQiLCJwX2Rlc2NyaXB0aW9uIiwicGxhY2VDb250cmFjdFRyYWRlIiwidHJhZGUiLCJ0cmFkaW5nUGFpciIsImlzX2Zyb3plbiIsInF1b3RlQXNzZXQiLCJzcGxpdCIsImN1cnJlbnRQcmljZSIsIm5ld1RyYWRlIiwidXNlcl9pZCIsInRyYWRpbmdfcGFpciIsImVudHJ5X3ByaWNlIiwic2V0dGxlbWVudF90aW1lIiwiRGF0ZSIsIm5vdyIsInBlcmlvZCIsInRvSVNPU3RyaW5nIiwicHJvZml0X3JhdGUiLCJpbnNlcnRlZFRyYWRlIiwiaW5zZXJ0IiwicGxhY2VTcG90VHJhZGUiLCJiYXNlQXNzZXQiLCJ0b3RhbCIsInByaWNlIiwiYmFzZV9hc3NldCIsInF1b3RlX2Fzc2V0IiwiYWRkRGFpbHlJbnZlc3RtZW50IiwicF9wcm9kdWN0X25hbWUiLCJwcm9kdWN0TmFtZSIsInBfZGFpbHlfcmF0ZSIsImRhaWx5UmF0ZSIsInBfcGVyaW9kIiwicF9jYXRlZ29yeSIsInBfc3Rha2luZ19hc3NldCIsInN0YWtpbmdBc3NldCIsInBfc3Rha2luZ19hbW91bnQiLCJzdGFraW5nQW1vdW50IiwiYWRkSG91cmx5SW52ZXN0bWVudCIsInNlbGVjdGVkVGllciIsInRpZXJzIiwiZmluZCIsImhvdXJzIiwiZHVyYXRpb25Ib3VycyIsInBfZHVyYXRpb25faG91cnMiLCJwX2hvdXJseV9yYXRlIiwicmF0ZSIsImhhbmRsZUNoZWNrSW4iLCJzdWNjZXNzIiwicmV3YXJkIiwicmV3YXJkX2Ftb3VudCIsInZhbHVlIiwiUHJvdmlkZXIiLCJ1c2VCYWxhbmNlIiwiY29udGV4dCIsIkVycm9yIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/context/balance-context.tsx\n"));

/***/ })

});