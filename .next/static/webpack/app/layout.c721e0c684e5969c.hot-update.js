"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"3ba9814b6c8e\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyJEOlxceGlhbmdtdVxcRWRnZS1GdW5jdGlvblxcY3RvYXBwXFxzcmNcXGFwcFxcZ2xvYmFscy5jc3MiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIzYmE5ODE0YjZjOGVcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/context/balance-context.tsx":
/*!*****************************************!*\
  !*** ./src/context/balance-context.tsx ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BalanceProvider: () => (/* binding */ BalanceProvider),\n/* harmony export */   useBalance: () => (/* binding */ useBalance)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _auth_context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./auth-context */ \"(app-pages-browser)/./src/context/auth-context.tsx\");\n/* harmony import */ var _enhanced_market_data_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./enhanced-market-data-context */ \"(app-pages-browser)/./src/context/enhanced-market-data-context.tsx\");\n/* harmony import */ var _hooks_use_toast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/hooks/use-toast */ \"(app-pages-browser)/./src/hooks/use-toast.ts\");\n/* harmony import */ var _logs_context__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./logs-context */ \"(app-pages-browser)/./src/context/logs-context.tsx\");\n/* harmony import */ var _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/lib/supabaseClient */ \"(app-pages-browser)/./src/lib/supabaseClient.ts\");\n/* __next_internal_client_entry_do_not_use__ BalanceProvider,useBalance auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\n\n\nconst BalanceContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nfunction BalanceProvider(param) {\n    let { children } = param;\n    _s();\n    const { user, updateUser } = (0,_auth_context__WEBPACK_IMPORTED_MODULE_2__.useAuth)();\n    const { getLatestPrice } = (0,_enhanced_market_data_context__WEBPACK_IMPORTED_MODULE_3__.useEnhancedMarketData)();\n    const { toast } = (0,_hooks_use_toast__WEBPACK_IMPORTED_MODULE_4__.useToast)();\n    const { addLog } = (0,_logs_context__WEBPACK_IMPORTED_MODULE_5__.useLogs)();\n    const [balances, setBalances] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [investments, setInvestments] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [rewardLogs, setRewardLogs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [activeContractTrades, setActiveContractTrades] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [historicalTrades, setHistoricalTrades] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [lastCheckInDate, setLastCheckInDate] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const [consecutiveCheckIns, setConsecutiveCheckIns] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const fetchUserBalanceData = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"BalanceProvider.useCallback[fetchUserBalanceData]\": async (userId)=>{\n            if (!_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) return;\n            const { data, error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.from('balances').select('*').eq('user_id', userId);\n            if (error) console.error(\"Error fetching balances:\", error);\n            else {\n                const formattedBalances = {};\n                data === null || data === void 0 ? void 0 : data.forEach({\n                    \"BalanceProvider.useCallback[fetchUserBalanceData]\": (b)=>{\n                        formattedBalances[b.asset] = {\n                            available: b.available_balance,\n                            frozen: b.frozen_balance\n                        };\n                    }\n                }[\"BalanceProvider.useCallback[fetchUserBalanceData]\"]);\n                setBalances(formattedBalances);\n            }\n        }\n    }[\"BalanceProvider.useCallback[fetchUserBalanceData]\"], []);\n    const fetchUserTradeData = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"BalanceProvider.useCallback[fetchUserTradeData]\": async (userId)=>{\n            if (!_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) return;\n            const { data, error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.from('trades').select('*').eq('user_id', userId).order('created_at', {\n                ascending: false\n            });\n            if (error) console.error(\"Error fetching trades:\", error);\n            else {\n                setActiveContractTrades(data.filter({\n                    \"BalanceProvider.useCallback[fetchUserTradeData]\": (t)=>t.orderType === 'contract' && t.status === 'active'\n                }[\"BalanceProvider.useCallback[fetchUserTradeData]\"]));\n                setHistoricalTrades(data.filter({\n                    \"BalanceProvider.useCallback[fetchUserTradeData]\": (t)=>t.status !== 'active'\n                }[\"BalanceProvider.useCallback[fetchUserTradeData]\"]));\n            }\n        }\n    }[\"BalanceProvider.useCallback[fetchUserTradeData]\"], []);\n    const fetchUserInvestmentData = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"BalanceProvider.useCallback[fetchUserInvestmentData]\": async (userId)=>{\n            if (!_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) return;\n            const { data, error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.from('investments').select('*').eq('user_id', userId).order('created_at', {\n                ascending: false\n            });\n            if (error) console.error(\"Error fetching investments:\", error);\n            else setInvestments(data);\n        }\n    }[\"BalanceProvider.useCallback[fetchUserInvestmentData]\"], []);\n    const fetchUserRewardLogs = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"BalanceProvider.useCallback[fetchUserRewardLogs]\": async (userId)=>{\n            if (!_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) return;\n            const { data, error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.from('reward_logs').select('*').eq('user_id', userId).order('created_at', {\n                ascending: false\n            });\n            if (error) console.error(\"Error fetching reward logs:\", error);\n            else setRewardLogs(data);\n        }\n    }[\"BalanceProvider.useCallback[fetchUserRewardLogs]\"], []);\n    const fetchUserProfileForCheckin = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"BalanceProvider.useCallback[fetchUserProfileForCheckin]\": async (userId)=>{\n            if (!_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) return;\n            const { data, error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.from('profiles').select('last_check_in_date, consecutive_check_ins').eq('id', userId).single();\n            if (error) {\n                console.error(\"Error fetching user profile for check-in:\", error);\n            } else if (data) {\n                setLastCheckInDate(data.last_check_in_date);\n                setConsecutiveCheckIns(data.consecutive_check_ins || 0);\n            }\n        }\n    }[\"BalanceProvider.useCallback[fetchUserProfileForCheckin]\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"BalanceProvider.useEffect\": ()=>{\n            const loadAllData = {\n                \"BalanceProvider.useEffect.loadAllData\": async ()=>{\n                    setIsLoading(true);\n                    if ((user === null || user === void 0 ? void 0 : user.id) && _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) {\n                        await Promise.all([\n                            fetchUserBalanceData(user.id),\n                            fetchUserTradeData(user.id),\n                            fetchUserInvestmentData(user.id),\n                            fetchUserRewardLogs(user.id),\n                            fetchUserProfileForCheckin(user.id)\n                        ]);\n                    } else {\n                        // Clear data on logout\n                        setBalances({});\n                        setInvestments([]);\n                        setRewardLogs([]);\n                        setActiveContractTrades([]);\n                        setHistoricalTrades([]);\n                        setLastCheckInDate(undefined);\n                        setConsecutiveCheckIns(0);\n                    }\n                    setIsLoading(false);\n                }\n            }[\"BalanceProvider.useEffect.loadAllData\"];\n            loadAllData();\n        }\n    }[\"BalanceProvider.useEffect\"], [\n        user,\n        _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled,\n        fetchUserBalanceData,\n        fetchUserTradeData,\n        fetchUserInvestmentData,\n        fetchUserRewardLogs,\n        fetchUserProfileForCheckin\n    ]);\n    // Realtime Subscriptions\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"BalanceProvider.useEffect\": ()=>{\n            if (!user || !_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) return;\n            const handleDataChange = {\n                \"BalanceProvider.useEffect.handleDataChange\": ()=>{\n                    if (!user) return;\n                    fetchUserTradeData(user.id);\n                    fetchUserInvestmentData(user.id);\n                    fetchUserBalanceData(user.id);\n                    fetchUserProfileForCheckin(user.id);\n                }\n            }[\"BalanceProvider.useEffect.handleDataChange\"];\n            const tradesChannel = _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.channel(\"trades-channel-\".concat(user.id)).on('postgres_changes', {\n                event: '*',\n                schema: 'public',\n                table: 'trades',\n                filter: \"user_id=eq.\".concat(user.id)\n            }, handleDataChange).subscribe();\n            const investmentsChannel = _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.channel(\"investments-channel-\".concat(user.id)).on('postgres_changes', {\n                event: '*',\n                schema: 'public',\n                table: 'investments',\n                filter: \"user_id=eq.\".concat(user.id)\n            }, handleDataChange).subscribe();\n            const balancesChannel = _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.channel(\"balances-channel-\".concat(user.id)).on('postgres_changes', {\n                event: '*',\n                schema: 'public',\n                table: 'balances',\n                filter: \"user_id=eq.\".concat(user.id)\n            }, handleDataChange).subscribe();\n            const profileChannel = _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.channel(\"profile-channel-\".concat(user.id)).on('postgres_changes', {\n                event: 'UPDATE',\n                schema: 'public',\n                table: 'profiles',\n                filter: \"id=eq.\".concat(user.id)\n            }, handleDataChange).subscribe();\n            return ({\n                \"BalanceProvider.useEffect\": ()=>{\n                    _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.removeChannel(tradesChannel);\n                    _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.removeChannel(investmentsChannel);\n                    _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.removeChannel(balancesChannel);\n                    _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.removeChannel(profileChannel);\n                }\n            })[\"BalanceProvider.useEffect\"];\n        }\n    }[\"BalanceProvider.useEffect\"], [\n        user,\n        _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled,\n        fetchUserTradeData,\n        fetchUserInvestmentData,\n        fetchUserBalanceData,\n        fetchUserProfileForCheckin\n    ]);\n    const adjustBalance = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"BalanceProvider.useCallback[adjustBalance]\": async function(userId, asset, amount) {\n            let isFrozen = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false, isDebitFrozen = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;\n            if (!_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) return;\n            const { error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.rpc('adjust_balance', {\n                p_user_id: userId,\n                p_asset: asset,\n                p_amount: amount,\n                p_is_frozen: isFrozen,\n                p_is_debit_frozen: isDebitFrozen\n            });\n            if (error) {\n                console.error(\"Error adjusting balance:\", error);\n                if ((user === null || user === void 0 ? void 0 : user.id) === userId) {\n                    toast({\n                        variant: 'destructive',\n                        title: 'Balance Update Failed',\n                        description: error.message\n                    });\n                }\n            } else {\n                if ((user === null || user === void 0 ? void 0 : user.id) === userId) {\n                    fetchUserBalanceData(userId);\n                }\n            }\n        }\n    }[\"BalanceProvider.useCallback[adjustBalance]\"], [\n        toast,\n        user === null || user === void 0 ? void 0 : user.id,\n        fetchUserBalanceData\n    ]);\n    const creditReward = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"BalanceProvider.useCallback[creditReward]\": async (params)=>{\n            if (!_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) return;\n            const { error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.rpc('credit_reward', {\n                p_user_id: params.userId,\n                p_amount: params.amount,\n                p_asset: params.asset,\n                p_reward_type: params.type,\n                p_source_id: params.sourceId,\n                p_description: params.description\n            });\n            if (error) {\n                console.error(\"Error crediting reward:\", error);\n            }\n        }\n    }[\"BalanceProvider.useCallback[creditReward]\"], []);\n    const placeContractTrade = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"BalanceProvider.useCallback[placeContractTrade]\": async (trade, tradingPair)=>{\n            var _balances_quoteAsset;\n            if (!user || !_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) return;\n            if (user.is_frozen) {\n                toast({\n                    variant: 'destructive',\n                    title: 'Action Failed',\n                    description: 'Your account is frozen.'\n                });\n                return;\n            }\n            const quoteAsset = tradingPair.split('/')[1];\n            const currentPrice = getLatestPrice(tradingPair);\n            if ((((_balances_quoteAsset = balances[quoteAsset]) === null || _balances_quoteAsset === void 0 ? void 0 : _balances_quoteAsset.available) || 0) < trade.amount) {\n                toast({\n                    variant: 'destructive',\n                    title: '下单失败',\n                    description: \"可用 \".concat(quoteAsset, \" 余额不足。\")\n                });\n                return;\n            }\n            const newTrade = {\n                user_id: user.id,\n                trading_pair: tradingPair,\n                type: trade.type,\n                amount: trade.amount,\n                entry_price: currentPrice,\n                settlement_time: new Date(Date.now() + trade.period * 1000).toISOString(),\n                period: trade.period,\n                profit_rate: trade.profit_rate,\n                status: 'active',\n                orderType: 'contract'\n            };\n            const { data: insertedTrade, error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.from('trades').insert(newTrade).select().single();\n            if (error || !insertedTrade) {\n                console.error(\"Failed to place contract trade:\", error);\n                toast({\n                    variant: 'destructive',\n                    title: '下单失败',\n                    description: '无法保存交易记录，请重试。'\n                });\n                return;\n            }\n            toast({\n                title: '下单成功',\n                description: '您的合约订单已成功建立。'\n            });\n        }\n    }[\"BalanceProvider.useCallback[placeContractTrade]\"], [\n        user,\n        balances,\n        getLatestPrice,\n        toast\n    ]);\n    const placeSpotTrade = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"BalanceProvider.useCallback[placeSpotTrade]\": async (trade)=>{\n            var _balances_quoteAsset, _balances_baseAsset;\n            if (!user || !_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) return;\n            if (user.is_frozen) {\n                toast({\n                    variant: 'destructive',\n                    title: 'Action Failed',\n                    description: 'Your account is frozen.'\n                });\n                return;\n            }\n            const [baseAsset, quoteAsset] = trade.trading_pair.split('/');\n            if (trade.type === 'buy' && (((_balances_quoteAsset = balances[quoteAsset]) === null || _balances_quoteAsset === void 0 ? void 0 : _balances_quoteAsset.available) || 0) < trade.total) {\n                toast({\n                    variant: 'destructive',\n                    title: '下单失败',\n                    description: \"可用 \".concat(quoteAsset, \" 余额不足。\")\n                });\n                return;\n            }\n            if (trade.type === 'sell' && (((_balances_baseAsset = balances[baseAsset]) === null || _balances_baseAsset === void 0 ? void 0 : _balances_baseAsset.available) || 0) < trade.amount) {\n                toast({\n                    variant: 'destructive',\n                    title: '下单失败',\n                    description: \"可用 \".concat(baseAsset, \" 余额不足。\")\n                });\n                return;\n            }\n            const currentPrice = getLatestPrice(trade.trading_pair);\n            const newTrade = {\n                type: trade.type,\n                amount: trade.amount,\n                total: trade.total,\n                price: currentPrice,\n                user_id: user.id,\n                trading_pair: trade.trading_pair,\n                base_asset: baseAsset,\n                quote_asset: quoteAsset,\n                status: 'filled',\n                orderType: 'spot'\n            };\n            const { data: insertedTrade, error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.from('trades').insert(newTrade).select().single();\n            if (error || !insertedTrade) {\n                console.error(\"Failed to place spot trade:\", error);\n                toast({\n                    variant: 'destructive',\n                    title: '下单失败',\n                    description: '无法保存交易记录，请联系客服。'\n                });\n                return;\n            }\n            toast({\n                title: '交易成功',\n                description: '您的币币交易已完成。'\n            });\n        }\n    }[\"BalanceProvider.useCallback[placeSpotTrade]\"], [\n        user,\n        balances,\n        getLatestPrice,\n        toast\n    ]);\n    const addDailyInvestment = async (params)=>{\n        if (!user || !_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) return false;\n        const { error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.rpc('create_daily_investment', {\n            p_user_id: user.id,\n            p_product_name: params.productName,\n            p_amount: params.amount,\n            p_daily_rate: params.dailyRate,\n            p_period: params.period,\n            p_category: 'staking',\n            p_staking_asset: params.stakingAsset,\n            p_staking_amount: params.stakingAmount\n        });\n        if (error) {\n            console.error(\"Failed to add daily investment:\", error);\n            toast({\n                variant: 'destructive',\n                title: '购买失败',\n                description: error.message\n            });\n            return false;\n        }\n        return true;\n    };\n    const addHourlyInvestment = async (params)=>{\n        if (!user || !_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) return false;\n        const selectedTier = params.tiers.find((t)=>t.hours === params.durationHours);\n        if (!selectedTier) return false;\n        const { error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.rpc('create_hourly_investment', {\n            p_user_id: user.id,\n            p_product_name: params.productName,\n            p_amount: params.amount,\n            p_duration_hours: params.durationHours,\n            p_hourly_rate: selectedTier.rate\n        });\n        if (error) {\n            console.error(\"Failed to add hourly investment:\", error);\n            toast({\n                variant: 'destructive',\n                title: '购买失败',\n                description: error.message\n            });\n            return false;\n        }\n        return true;\n    };\n    const handleCheckIn = async ()=>{\n        if (!user || !_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.isSupabaseEnabled) {\n            return {\n                success: false,\n                reward: 0,\n                message: \"User not logged in.\"\n            };\n        }\n        const { data, error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_6__.supabase.rpc('handle_user_check_in', {\n            p_user_id: user.id\n        });\n        if (error) {\n            return {\n                success: false,\n                reward: 0,\n                message: error.message\n            };\n        }\n        return {\n            success: data.success,\n            reward: data.reward_amount,\n            message: data.message\n        };\n    };\n    const value = {\n        balances,\n        placeContractTrade,\n        placeSpotTrade,\n        isLoading,\n        investments,\n        rewardLogs,\n        addDailyInvestment,\n        addHourlyInvestment,\n        activeContractTrades,\n        historicalTrades,\n        handleCheckIn,\n        lastCheckInDate,\n        consecutiveCheckIns,\n        creditReward,\n        adjustBalance\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(BalanceContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"D:\\\\xiangmu\\\\Edge-Function\\\\ctoapp\\\\src\\\\context\\\\balance-context.tsx\",\n        lineNumber: 381,\n        columnNumber: 9\n    }, this);\n}\n_s(BalanceProvider, \"hoNqBYuxqX+2Ni0lfrmGKQcHg0I=\", false, function() {\n    return [\n        _auth_context__WEBPACK_IMPORTED_MODULE_2__.useAuth,\n        _enhanced_market_data_context__WEBPACK_IMPORTED_MODULE_3__.useEnhancedMarketData,\n        _hooks_use_toast__WEBPACK_IMPORTED_MODULE_4__.useToast,\n        _logs_context__WEBPACK_IMPORTED_MODULE_5__.useLogs\n    ];\n});\n_c = BalanceProvider;\nfunction useBalance() {\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(BalanceContext);\n    if (context === undefined) {\n        throw new Error('useBalance must be used within an BalanceProvider');\n    }\n    return context;\n}\n_s1(useBalance, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"BalanceProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/context/balance-context.tsx\n"));

/***/ })

});